
> functionalscope@0.1.0 lint
> vue-cli-service lint

warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/App.vue:23:5:
  21 |   },
  22 |   computed: {
> 23 |     cityPyo() {
     |     ^
  24 |       return this.$store.state.cityPyO;
  25 |     },
  26 |     loader() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/App.vue:26:5:
  24 |       return this.$store.state.cityPyO;
  25 |     },
> 26 |     loader() {
     |     ^
  27 |       return this.$store.state.loader;
  28 |     },
  29 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/Login.vue:13:5:
  11 |   },
  12 |   computed: {
> 13 |     cityPyO() {
     |     ^
  14 |       return this.$store.state.cityPyO;
  15 |     },
  16 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/Login.vue:17:3:
  15 |     },
  16 |   },
> 17 |   data() {
     |   ^
  18 |     return {
  19 |       authenticated: false,
  20 |       restrictedAccess: true,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/Login.vue:31:3:
  29 |     };
  30 |   },
> 31 |   mounted() {
     |   ^
  32 |     if (process.env.NODE_ENV === "development") {
  33 |       this.form.username = CityPyoDefaultUser.username;
  34 |       this.form.password = CityPyoDefaultUser.password;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/Login.vue:40:5:
  38 |   methods: {
  39 |     ...mapActions(["LogIn"]),
> 40 |     sleep(ms) {
     |     ^
  41 |       return new Promise((resolve) => setTimeout(resolve, ms));
  42 |     },
  43 |     switchVisibility() {


warning: Argument 'ms' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/Login.vue:40:11:
  38 |   methods: {
  39 |     ...mapActions(["LogIn"]),
> 40 |     sleep(ms) {
     |           ^
  41 |       return new Promise((resolve) => setTimeout(resolve, ms));
  42 |     },
  43 |     switchVisibility() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/Login.vue:43:5:
  41 |       return new Promise((resolve) => setTimeout(resolve, ms));
  42 |     },
> 43 |     switchVisibility() {
     |     ^
  44 |       this.passwordFieldType =
  45 |         this.passwordFieldType === "password" ? "text" : "password";
  46 |       this.passwordIcon =


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/Login.vue:49:5:
  47 |         this.passwordFieldType === "password" ? "mdi-eye" : "mdi-eye-off";
  48 |     },
> 49 |     async submit() {
     |     ^
  50 |       this.authenticated = false;
  51 | 
  52 |       const userdata = {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/Login.vue:76:5:
  74 |     },
  75 |     // see if the user has a custom map center specified on cityPyo - if not - continue using app default
> 76 |     async applyCustomMapSettings() {
     |     ^
  77 |       let customMapSettings = await this.$store.state.cityPyO.getLayer(
  78 |         "mapSettings",
  79 |         false


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/GFI/GFI.vue:6:3:
  4 |   name: "GFI",
  5 |   components: {},
> 6 |   data() {
    |   ^
  7 |     return {};
  8 |   },
  9 |   computed: {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Loader/Loader.vue:7:3:
   5 |   name: "Contextmenu",
   6 |   components: {},
>  7 |   data() {
     |   ^
   8 |     return {
   9 |       loading: this.loader,
  10 |     };


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Loader/Loader.vue:14:5:
  12 |   computed: {
  13 |     ...mapState(["allFeaturesHighlighted", "map"]),
> 14 |     loader() {
     |     ^
  15 |       return this.$store.state.scenario.loader;
  16 |     },
  17 |     loaderTxt() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Loader/Loader.vue:17:5:
  15 |       return this.$store.state.scenario.loader;
  16 |     },
> 17 |     loaderTxt() {
     |     ^
  18 |       return this.$store.state.scenario.loaderTxt;
  19 |     },
  20 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Loader/Loader.vue:22:5:
  20 |   },
  21 |   watch: {
> 22 |     loader(val) {
     |     ^
  23 |       console.log("iam logging", val);
  24 |       this.loading = val;
  25 |     },


warning: Argument 'val' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Loader/Loader.vue:22:12:
  20 |   },
  21 |   watch: {
> 22 |     loader(val) {
     |            ^
  23 |       console.log("iam logging", val);
  24 |       this.loading = val;
  25 |     },


warning: 'mapActions' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Map/Map.vue:3:20:
  1 | <script lang="ts">
  2 | import mapboxgl from "mapbox-gl";
> 3 | import { mapState, mapActions, mapGetters, mapMutations } from "vuex";
    |                    ^
  4 | import amenities from "@/config/amenities.json";
  5 | import { alkisTranslations } from "@/store/abm";
  6 | import { generateStoreGetterSetter } from "@/store/utils/generators";


warning: 'mapGetters' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Map/Map.vue:3:32:
  1 | <script lang="ts">
  2 | import mapboxgl from "mapbox-gl";
> 3 | import { mapState, mapActions, mapGetters, mapMutations } from "vuex";
    |                                ^
  4 | import amenities from "@/config/amenities.json";
  5 | import { alkisTranslations } from "@/store/abm";
  6 | import { generateStoreGetterSetter } from "@/store/utils/generators";


warning: 'mapMutations' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Map/Map.vue:3:44:
  1 | <script lang="ts">
  2 | import mapboxgl from "mapbox-gl";
> 3 | import { mapState, mapActions, mapGetters, mapMutations } from "vuex";
    |                                            ^
  4 | import amenities from "@/config/amenities.json";
  5 | import { alkisTranslations } from "@/store/abm";
  6 | import { generateStoreGetterSetter } from "@/store/utils/generators";


error: The "Contextmenu" component has been registered but not used (vue/no-unused-components) at src/components/Map/Map.vue:14:17:
  12 | export default {
  13 |   name: "Map",
> 14 |   components: { Contextmenu },
     |                 ^
  15 |   props: {
  16 |     restrictedAccess: Boolean,
  17 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:18:3:
  16 |     restrictedAccess: Boolean,
  17 |   },
> 18 |   data() {
     |   ^
  19 |     return {
  20 |       lastClicked: [],
  21 |       hoveredFocusArea: null,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:45:5:
  43 |       ["openModalsIds", "openModalsIds"],
  44 |     ]),
> 45 |     abmTrips() {
     |     ^
  46 |       return this.$store.state.scenario.abmTrips;
  47 |     },
  48 |     heatMapData() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:48:5:
  46 |       return this.$store.state.scenario.abmTrips;
  47 |     },
> 48 |     heatMapData() {
     |     ^
  49 |       return this.$store.state.scenario.heatMapData;
  50 |     },
  51 |     heatMapActive() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:51:5:
  49 |       return this.$store.state.scenario.heatMapData;
  50 |     },
> 51 |     heatMapActive() {
     |     ^
  52 |       return this.$store.state.scenario.heatMap;
  53 |     },
  54 |     heatMapType() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:54:5:
  52 |       return this.$store.state.scenario.heatMap;
  53 |     },
> 54 |     heatMapType() {
     |     ^
  55 |       return this.$store.state.scenario.heatMapType;
  56 |     },
  57 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:59:5:
  57 |   },
  58 |   watch: {
> 59 |     heatMapData() {
     |     ^
  60 |       this.updateHeatMap();
  61 |     },
  62 |     heatMapActive() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:62:5:
  60 |       this.updateHeatMap();
  61 |     },
> 62 |     heatMapActive() {
     |     ^
  63 |       this.updateHeatMap();
  64 |     },
  65 |     heatMapType() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:65:5:
  63 |       this.updateHeatMap();
  64 |     },
> 65 |     heatMapType() {
     |     ^
  66 |       this.updateHeatMap();
  67 |     },
  68 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:69:3:
  67 |     },
  68 |   },
> 69 |   mounted() {
     |   ^
  70 |     mapboxgl.accessToken = this.accessToken;
  71 | 
  72 |     const options = {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:111:5:
  109 |   },
  110 |   methods: {
> 111 |     mousePos(evt) {
      |     ^
  112 |       this.lastClicked = [];
  113 |       this.lastClicked[0] = (evt.clientX * 100) / window.innerWidth / 100;
  114 |       this.lastClicked[1] = (evt.clientY * 100) / window.innerHeight / 100;


warning: Argument 'evt' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:111:14:
  109 |   },
  110 |   methods: {
> 111 |     mousePos(evt) {
      |              ^
  112 |       this.lastClicked = [];
  113 |       this.lastClicked[0] = (evt.clientX * 100) / window.innerWidth / 100;
  114 |       this.lastClicked[1] = (evt.clientY * 100) / window.innerHeight / 100;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:117:5:
  115 |       this.$store.commit("scenario/lastClick", this.lastClicked);
  116 |     },
> 117 |     onMapClicked(evt) {
      |     ^
  118 |       console.log("click!", this.map);
  119 | 
  120 |       const bbox = [


warning: Argument 'evt' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:117:18:
  115 |       this.$store.commit("scenario/lastClick", this.lastClicked);
  116 |     },
> 117 |     onMapClicked(evt) {
      |                  ^
  118 |       console.log("click!", this.map);
  119 | 
  120 |       const bbox = [


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:132:5:
  130 |       this.actionForClick(features);
  131 |     },
> 132 |     actionForClick(clickedFeatures) {
      |     ^
  133 |       const initialFeature = clickedFeatures[0];
  134 |       const initialLayerId = initialFeature.layer.id;
  135 | 


warning: Argument 'clickedFeatures' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:132:20:
  130 |       this.actionForClick(features);
  131 |     },
> 132 |     actionForClick(clickedFeatures) {
      |                    ^
  133 |       const initialFeature = clickedFeatures[0];
  134 |       const initialLayerId = initialFeature.layer.id;
  135 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:162:5:
  160 |     },
  161 |     /* opens or closes modal */
> 162 |     handleModal(initialFeature) {
      |     ^
  163 |       this.selectedObjectId = initialFeature.properties["city_scope_id"];
  164 | 
  165 |       if (this.openModalsIds.indexOf(this.selectedObjectId) !== -1) {


warning: Argument 'initialFeature' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:162:17:
  160 |     },
  161 |     /* opens or closes modal */
> 162 |     handleModal(initialFeature) {
      |                 ^
  163 |       this.selectedObjectId = initialFeature.properties["city_scope_id"];
  164 | 
  165 |       if (this.openModalsIds.indexOf(this.selectedObjectId) !== -1) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:175:5:
  173 |       this.createModal();
  174 |     },
> 175 |     onMapLoaded() {
      |     ^
  176 |       this.$store.dispatch("addFocusAreasMapLayer");
  177 |       console.log("create design layers");
  178 |       this.$store.dispatch("createDesignLayers");


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:180:5:
  178 |       this.$store.dispatch("createDesignLayers");
  179 |     },
> 180 |     createModal() {
      |     ^
  181 |       this.openModalsIds.push(this.selectedObjectId);
  182 |       this.$modal.show(
  183 |         Contextmenu,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:195:5:
  193 |       );
  194 |     },
> 195 |     updateHeatMap() {
      |     ^
  196 |       //this.$store.dispatch('scenario/rebuildDeckLayer')
  197 |     },
  198 |     onAmenitiesHover(evt) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:198:5:
  196 |       //this.$store.dispatch('scenario/rebuildDeckLayer')
  197 |     },
> 198 |     onAmenitiesHover(evt) {
      |     ^
  199 |       this.map.getCanvas().style.cursor = "pointer";
  200 | 
  201 |       const coordinates = evt.features[0].geometry.coordinates.slice();


warning: Argument 'evt' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:198:22:
  196 |       //this.$store.dispatch('scenario/rebuildDeckLayer')
  197 |     },
> 198 |     onAmenitiesHover(evt) {
      |                      ^
  199 |       this.map.getCanvas().style.cursor = "pointer";
  200 | 
  201 |       const coordinates = evt.features[0].geometry.coordinates.slice();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:216:5:
  214 |       this.popup.setLngLat(coordinates).setHTML(description).addTo(this.map);
  215 |     },
> 216 |     onAmenitiesHoverLeave(evt) {
      |     ^
  217 |       console.log("leaving layer");
  218 |       this.map.getCanvas().style.cursor = "";
  219 |       this.popup.remove();


warning: Argument 'evt' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:216:27:
  214 |       this.popup.setLngLat(coordinates).setHTML(description).addTo(this.map);
  215 |     },
> 216 |     onAmenitiesHoverLeave(evt) {
      |                           ^
  217 |       console.log("leaving layer");
  218 |       this.map.getCanvas().style.cursor = "";
  219 |       this.popup.remove();


warning: 'evt' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Map/Map.vue:216:27:
  214 |       this.popup.setLngLat(coordinates).setHTML(description).addTo(this.map);
  215 |     },
> 216 |     onAmenitiesHoverLeave(evt) {
      |                           ^
  217 |       console.log("leaving layer");
  218 |       this.map.getCanvas().style.cursor = "";
  219 |       this.popup.remove();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:221:5:
  219 |       this.popup.remove();
  220 |     },
> 221 |     onFocusAreaHover(evt) {
      |     ^
  222 |       if (evt.features.length > 0) {
  223 |         if (this.hoveredFocusArea) {
  224 |           this.map.setFeatureState(


warning: Argument 'evt' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:221:22:
  219 |       this.popup.remove();
  220 |     },
> 221 |     onFocusAreaHover(evt) {
      |                      ^
  222 |       if (evt.features.length > 0) {
  223 |         if (this.hoveredFocusArea) {
  224 |           this.map.setFeatureState(


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:237:5:
  235 |       }
  236 |     },
> 237 |     onFocusAreaLeave(evt) {
      |     ^
  238 |       if (this.hoveredFocusArea) {
  239 |         this.map.setFeatureState(
  240 |           { source: "focusAreas", id: this.hoveredFocusArea },


warning: Argument 'evt' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:237:22:
  235 |       }
  236 |     },
> 237 |     onFocusAreaLeave(evt) {
      |                      ^
  238 |       if (this.hoveredFocusArea) {
  239 |         this.map.setFeatureState(
  240 |           { source: "focusAreas", id: this.hoveredFocusArea },


warning: 'evt' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Map/Map.vue:237:22:
  235 |       }
  236 |     },
> 237 |     onFocusAreaLeave(evt) {
      |                      ^
  238 |       if (this.hoveredFocusArea) {
  239 |         this.map.setFeatureState(
  240 |           { source: "focusAreas", id: this.hoveredFocusArea },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:246:5:
  244 |       this.hoveredFocusArea = null;
  245 |     },
> 246 |     onFocusAreaClick(selectedFocusArea) {
      |     ^
  247 |       console.log("click focus area");
  248 |       const idx = this.selectedFocusAreas.indexOf(selectedFocusArea);
  249 |       if (idx > -1) {


warning: Argument 'selectedFocusArea' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Map/Map.vue:246:22:
  244 |       this.hoveredFocusArea = null;
  245 |     },
> 246 |     onFocusAreaClick(selectedFocusArea) {
      |                      ^
  247 |       console.log("click focus area");
  248 |       const idx = this.selectedFocusAreas.indexOf(selectedFocusArea);
  249 |       if (idx > -1) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:13:3:
  11 |   name: "Contextmenu",
  12 |   components: {},
> 13 |   data() {
     |   ^
  14 |     return {
  15 |       lineCanvasId: null,
  16 |       active: false,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:38:5:
  36 |     ]),
  37 |     // city_scope_id of the clicked object (set in Map.vue, onMapClick)
> 38 |     selectedObjectId() {
     |     ^
  39 |       return this.$store.state.selectedObjectId;
  40 |     },
  41 |     abmTrips() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:41:5:
  39 |       return this.$store.state.selectedObjectId;
  40 |     },
> 41 |     abmTrips() {
     |     ^
  42 |       return this.$store.state.scenario.abmTrips;
  43 |     },
  44 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:45:3:
  43 |     },
  44 |   },
> 45 |   beforeMount() {
     |   ^
  46 |     if (!this.selectedObjectId) {
  47 |       console.log("Tried to open modal, but no selectedObjectId given");
  48 |       return;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:59:5:
  57 |   },
  58 |   watch: {
> 59 |     asOrigin(newVal, oldVal) {
     |     ^
  60 |       if (newVal && this.asDestination) {
  61 |         this.asDestination = false;
  62 |       }


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:59:14:
  57 |   },
  58 |   watch: {
> 59 |     asOrigin(newVal, oldVal) {
     |              ^
  60 |       if (newVal && this.asDestination) {
  61 |         this.asDestination = false;
  62 |       }


warning: Argument 'oldVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:59:22:
  57 |   },
  58 |   watch: {
> 59 |     asOrigin(newVal, oldVal) {
     |                      ^
  60 |       if (newVal && this.asDestination) {
  61 |         this.asDestination = false;
  62 |       }


warning: 'oldVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Contextmenu.vue:59:22:
  57 |   },
  58 |   watch: {
> 59 |     asOrigin(newVal, oldVal) {
     |                      ^
  60 |       if (newVal && this.asDestination) {
  61 |         this.asDestination = false;
  62 |       }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:72:5:
  70 |       }
  71 |     },
> 72 |     asDestination(newVal, oldVal) {
     |     ^
  73 |       if (newVal && this.asOrigin) {
  74 |         this.asOrigin = false;
  75 |       }


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:72:19:
  70 |       }
  71 |     },
> 72 |     asDestination(newVal, oldVal) {
     |                   ^
  73 |       if (newVal && this.asOrigin) {
  74 |         this.asOrigin = false;
  75 |       }


warning: Argument 'oldVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:72:27:
  70 |       }
  71 |     },
> 72 |     asDestination(newVal, oldVal) {
     |                           ^
  73 |       if (newVal && this.asOrigin) {
  74 |         this.asOrigin = false;
  75 |       }


warning: 'oldVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Contextmenu.vue:72:27:
  70 |       }
  71 |     },
> 72 |     asDestination(newVal, oldVal) {
     |                           ^
  73 |       if (newVal && this.asOrigin) {
  74 |         this.asOrigin = false;
  75 |       }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:86:5:
  84 |     },
  85 |     /** filter arcLayerData with new minOdTrips value and renew layer */
> 86 |     minOdTrips() {
     |     ^
  87 |       this.updateOdTripsLayer();
  88 |     },
  89 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:90:3:
  88 |     },
  89 |   },
> 90 |   mounted() {
     |   ^
  91 |     let selector = this.$el;
  92 |     this.modalDiv = selector.closest(".vm--modal");
  93 |     this.selectedModal();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:110:3:
  108 |     window.addEventListener("mouseup", this.stopDrag);
  109 |   },
> 110 |   beforeDestroy() {
      |   ^
  111 |     this.toggleFeatureCircling();
  112 | 
  113 |     if (!this.allFeaturesHighlighted) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:132:5:
  130 |   },
  131 |   methods: {
> 132 |     createObjectFeatures() {
      |     ^
  133 |       const renderedFeatures = this.map.queryRenderedFeatures();
  134 |       this.objectFeatures = renderedFeatures.filter((feat) => {
  135 |         return feat.properties["city_scope_id"] === this.objectId;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:138:5:
  136 |       });
  137 |     },
> 138 |     getLayerHeadline(layerName) {
      |     ^
  139 |       const headlines = {
  140 |         groundfloor: "Groundfloor",
  141 |         upperfloor: "Upper Floors",


warning: Argument 'layerName' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:138:22:
  136 |       });
  137 |     },
> 138 |     getLayerHeadline(layerName) {
      |                      ^
  139 |       const headlines = {
  140 |         groundfloor: "Groundfloor",
  141 |         upperfloor: "Upper Floors",


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:148:5:
  146 |       return headlines[layerName];
  147 |     },
> 148 |     gatherModalInfo() {
      |     ^
  149 |       this.modalInfo = {
  150 |         objectType: "",
  151 |         generalContent: [], // [{ propTitle: propValue}, ..]}


warning: 'i' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Contextmenu.vue:156:45:
  154 | 
  155 |       // iterate over objects features and add modal info, depending on feature layer or type
> 156 |       this.objectFeatures.forEach((feature, i, a) => {
      |                                             ^
  157 |         const layerId = feature.layer.id;
  158 |         switch (layerId) {
  159 |           case "groundfloor":


warning: 'a' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Contextmenu.vue:156:48:
  154 | 
  155 |       // iterate over objects features and add modal info, depending on feature layer or type
> 156 |       this.objectFeatures.forEach((feature, i, a) => {
      |                                                ^
  157 |         const layerId = feature.layer.id;
  158 |         switch (layerId) {
  159 |           case "groundfloor":


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:199:5:
  197 |       });
  198 |     },
> 199 |     addBuildingFloorInfo(feature, floorType) {
      |     ^
  200 |       console.warn("suggested use detail ", feature.properties);
  201 | 
  202 |       this.modalInfo["detailContent"][feature.layer.id] = [


warning: Argument 'feature' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:199:26:
  197 |       });
  198 |     },
> 199 |     addBuildingFloorInfo(feature, floorType) {
      |                          ^
  200 |       console.warn("suggested use detail ", feature.properties);
  201 | 
  202 |       this.modalInfo["detailContent"][feature.layer.id] = [


warning: Argument 'floorType' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:199:35:
  197 |       });
  198 |     },
> 199 |     addBuildingFloorInfo(feature, floorType) {
      |                                   ^
  200 |       console.warn("suggested use detail ", feature.properties);
  201 | 
  202 |       this.modalInfo["detailContent"][feature.layer.id] = [


warning: 'floorType' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Contextmenu.vue:199:35:
  197 |       });
  198 |     },
> 199 |     addBuildingFloorInfo(feature, floorType) {
      |                                   ^
  200 |       console.warn("suggested use detail ", feature.properties);
  201 | 
  202 |       this.modalInfo["detailContent"][feature.layer.id] = [


error: 'properties' is not defined (no-undef) at src/components/Menu/Contextmenu.vue:219:47:
  217 |             {
  218 |               "total floor area upperfloors":
> 219 |                 Math.floor(upperFloorsCount * properties["floor_area"]) + "m²",
      |                                               ^
  220 |             }
  221 |           );
  222 |         }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:225:5:
  223 |       }
  224 |     },
> 225 |     toggleFeatureHighlighting() {
      |     ^
  226 |       if (this.allFeaturesHighlighted) {
  227 |         // do not change highlighting
  228 |         return;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:241:5:
  239 |     },
  240 |     /** circles or uncircles clickedFeatures */
> 241 |     toggleFeatureCircling() {
      |     ^
  242 |       let buffer = null;
  243 | 
  244 |       console.log("features", this.objectFeatures);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:273:5:
  271 |       this.$store.dispatch("updateCircledFeaturesLayer", buffer);
  272 |     },
> 273 |     getProjectedObjectCoords() {
      |     ^
  274 |       return this.map.project(this.modalInfo["coords"]);
  275 |     },
  276 |     async getArcLayerData(objectData, asOrigin) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:276:5:
  274 |       return this.map.project(this.modalInfo["coords"]);
  275 |     },
> 276 |     async getArcLayerData(objectData, asOrigin) {
      |     ^
  277 |       this.arcLayerData = await getOdArcData(
  278 |         objectData,
  279 |         this.modalInfo,


warning: Argument 'objectData' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:276:27:
  274 |       return this.map.project(this.modalInfo["coords"]);
  275 |     },
> 276 |     async getArcLayerData(objectData, asOrigin) {
      |                           ^
  277 |       this.arcLayerData = await getOdArcData(
  278 |         objectData,
  279 |         this.modalInfo,


warning: Argument 'asOrigin' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:276:39:
  274 |       return this.map.project(this.modalInfo["coords"]);
  275 |     },
> 276 |     async getArcLayerData(objectData, asOrigin) {
      |                                       ^
  277 |       this.arcLayerData = await getOdArcData(
  278 |         objectData,
  279 |         this.modalInfo,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:283:5:
  281 |       );
  282 |     },
> 283 |     filterArcLayerData() {
      |     ^
  284 |       if (this.minOdTrips === 1 || this.arcLayerData.length === 0) {
  285 |         // no need to filter
  286 |         return this.arcLayerData;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:300:5:
  298 |       });
  299 |     },
> 300 |     updateOdTripsLayer() {
      |     ^
  301 |       // filter data first
  302 |       const data = this.filterArcLayerData();
  303 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:317:5:
  315 |       console.log("new arc layer with # trips = ", data.length);
  316 |     },
> 317 |     sleep(ms) {
      |     ^
  318 |       return new Promise((resolve) => setTimeout(resolve, ms));
  319 |     },
  320 |     selectedModal() {


warning: Argument 'ms' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:317:11:
  315 |       console.log("new arc layer with # trips = ", data.length);
  316 |     },
> 317 |     sleep(ms) {
      |           ^
  318 |       return new Promise((resolve) => setTimeout(resolve, ms));
  319 |     },
  320 |     selectedModal() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:320:5:
  318 |       return new Promise((resolve) => setTimeout(resolve, ms));
  319 |     },
> 320 |     selectedModal() {
      |     ^
  321 |       this.modalIndex += 1;
  322 |       let selector = this.$el;
  323 |       let targetModal = selector.closest(".vm--container");


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:327:5:
  325 |     },
  326 |     /** creates a line on canvas connecting the modal box to it's object as anchor */
> 327 |     createLineOnCanvas() {
      |     ^
  328 |       if (window.innerWidth >= 1024) {
  329 |         if (this.active) {
  330 |           this.lineCanvasId = "line_" + this.objectId;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:379:5:
  377 |       }
  378 |     },
> 379 |     startDrag() {
      |     ^
  380 |       this.dragging = true;
  381 |     },
  382 |     stopDrag() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:382:5:
  380 |       this.dragging = true;
  381 |     },
> 382 |     stopDrag() {
      |     ^
  383 |       this.dragging = false;
  384 |     },
  385 |     doDrag(event) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:385:5:
  383 |       this.dragging = false;
  384 |     },
> 385 |     doDrag(event) {
      |     ^
  386 |       if (this.dragging && window.innerWidth >= 1024) {
  387 |         this.createLineOnCanvas();
  388 |       }


warning: Argument 'event' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Contextmenu.vue:385:12:
  383 |       this.dragging = false;
  384 |     },
> 385 |     doDrag(event) {
      |            ^
  386 |       if (this.dragging && window.innerWidth >= 1024) {
  387 |         this.createLineOnCanvas();
  388 |       }


warning: 'event' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Contextmenu.vue:385:12:
  383 |       this.dragging = false;
  384 |     },
> 385 |     doDrag(event) {
      |            ^
  386 |       if (this.dragging && window.innerWidth >= 1024) {
  387 |         this.createLineOnCanvas();
  388 |       }


error: Elements in iteration expect to have 'v-bind:key' directives (vue/require-v-for-key) at src/components/Menu/Contextmenu.vue:398:13:
  396 |         <div class="wrapper">
  397 |             <div class="ctx_bar"><v-icon size="18px">mdi-city</v-icon> <p>{{ modalInfo.objectType }} - {{ objectId }}</p><div class="close_btn" @click="$emit('close')"><v-icon>mdi-close</v-icon></div></div>
> 398 |             <div class="general" v-for="item in modalInfo.generalContent"><p>
      |             ^
  399 |                 <div v-for="(value, key) in item">
  400 |                   <p>{{ key }} : {{ value }}</p>
  401 |                 </div>


error: Elements in iteration expect to have 'v-bind:key' directives (vue/require-v-for-key) at src/components/Menu/Contextmenu.vue:399:17:
  397 |             <div class="ctx_bar"><v-icon size="18px">mdi-city</v-icon> <p>{{ modalInfo.objectType }} - {{ objectId }}</p><div class="close_btn" @click="$emit('close')"><v-icon>mdi-close</v-icon></div></div>
  398 |             <div class="general" v-for="item in modalInfo.generalContent"><p>
> 399 |                 <div v-for="(value, key) in item">
      |                 ^
  400 |                   <p>{{ key }} : {{ value }}</p>
  401 |                 </div>
  402 |               </div>


error: Elements in iteration expect to have 'v-bind:key' directives (vue/require-v-for-key) at src/components/Menu/Contextmenu.vue:404:13:
  402 |               </div>
  403 |             </div>
> 404 |             <div class="head_scope" v-for="(content, name) in modalInfo.detailContent">
      |             ^
  405 |                 <div class="head_bar"><h3>{{ getLayerHeadline(name) }}</h3></div>
  406 |                     <div v-for="ctx in content">
  407 |                       <div v-for="(value, key) in ctx">


error: Elements in iteration expect to have 'v-bind:key' directives (vue/require-v-for-key) at src/components/Menu/Contextmenu.vue:406:21:
  404 |             <div class="head_scope" v-for="(content, name) in modalInfo.detailContent">
  405 |                 <div class="head_bar"><h3>{{ getLayerHeadline(name) }}</h3></div>
> 406 |                     <div v-for="ctx in content">
      |                     ^
  407 |                       <div v-for="(value, key) in ctx">
  408 |                         <p><strong>{{ key }}</strong> {{value}} </p>
  409 |                       </div>


error: Elements in iteration expect to have 'v-bind:key' directives (vue/require-v-for-key) at src/components/Menu/Contextmenu.vue:407:23:
  405 |                 <div class="head_bar"><h3>{{ getLayerHeadline(name) }}</h3></div>
  406 |                     <div v-for="ctx in content">
> 407 |                       <div v-for="(value, key) in ctx">
      |                       ^
  408 |                         <p><strong>{{ key }}</strong> {{value}} </p>
  409 |                       </div>
  410 |                     </div>


error: Parsing error: x-invalid-end-tag (vue/no-parsing-error) at src/components/Menu/Contextmenu.vue:447:5:
  445 |         </div>
  446 |         <!--<svg class="connection"><line :x1="Math.round(anchorConnnection.x)" :y1="Math.round(anchorConnnection.y)" :x2="Math.round(boxConnection.x)" :y2="Math.round(boxConnection.y)" stroke-width="1px" stroke="white"/></svg>-->
> 447 |     </div>
      |     ^
  448 | </template>
  449 | 
  450 | <style scoped lang='scss'>


warning: Parsing error: Unexpected closing tag "div". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags (prettier/prettier) at src/components/Menu/Contextmenu.vue:447:6:
  445 |         </div>
  446 |         <!--<svg class="connection"><line :x1="Math.round(anchorConnnection.x)" :y1="Math.round(anchorConnnection.y)" :x2="Math.round(boxConnection.x)" :y2="Math.round(boxConnection.y)" stroke-width="1px" stroke="white"/></svg>-->
> 447 |     </div>
      |      ^
  448 | </template>
  449 | 
  450 | <style scoped lang='scss'>


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Menu.vue:22:3:
  20 |     restrictedAccess: Boolean,
  21 |   },
> 22 |   data() {
     |   ^
  23 |     return {
  24 |       windowWidth: window.innerWidth,
  25 |       menuOpen: false,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Menu.vue:30:7:
  28 |   computed: {
  29 |     activeComponent: {
> 30 |       get() {
     |       ^
  31 |         return this.$store.state.activeMenuComponent;
  32 |       },
  33 |       set(value) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Menu.vue:33:7:
  31 |         return this.$store.state.activeMenuComponent;
  32 |       },
> 33 |       set(value) {
     |       ^
  34 |         this.$store.commit("activeMenuComponent", value);
  35 |       },
  36 |     },


warning: Argument 'value' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Menu.vue:33:11:
  31 |         return this.$store.state.activeMenuComponent;
  32 |       },
> 33 |       set(value) {
     |           ^
  34 |         this.$store.commit("activeMenuComponent", value);
  35 |       },
  36 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Menu.vue:37:5:
  35 |       },
  36 |     },
> 37 |     showUi() {
     |     ^
  38 |       return this.$store.state.scenario.showUi;
  39 |     },
  40 |   },


warning: 'filterAndScaleLayerData' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Viewbar.vue:6:10:
  4 | import FocusAreasLayerConfig from "@/config/focusAreas.json";
  5 | import MultiLayerAnalysisConfig from "@/config/multiLayerAnalysis.json";
> 6 | import { filterAndScaleLayerData } from "@/store/scenario/multiLayerAnalysis";
    |          ^
  7 | import legends from "@/config/legends.json";
  8 | 
  9 | export default {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:15:3:
  13 |     restrictedAccess: Boolean,
  14 |   },
> 15 |   data() {
     |   ^
  16 |     return {
  17 |       toggleFeatures: false,
  18 |       brightness: 1,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:52:5:
  50 |       ["focusAreasShown", "focusAreasShown"],
  51 |     ]),
> 52 |     layerIds() {
     |     ^
  53 |       return this.$store.state.layerIds;
  54 |     },
  55 |     loader() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:55:5:
  53 |       return this.$store.state.layerIds;
  54 |     },
> 55 |     loader() {
     |     ^
  56 |       return this.$store.state.scenario.loader;
  57 |     },
  58 |     activeAbmSet() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:58:5:
  56 |       return this.$store.state.scenario.loader;
  57 |     },
> 58 |     activeAbmSet() {
     |     ^
  59 |       return this.$store.state.scenario.activeAbmSet;
  60 |     },
  61 |     heatMap() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:61:5:
  59 |       return this.$store.state.scenario.activeAbmSet;
  60 |     },
> 61 |     heatMap() {
     |     ^
  62 |       return this.$store.state.scenario.heatMap;
  63 |     },
  64 |     noiseMap() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:64:5:
  62 |       return this.$store.state.scenario.heatMap;
  63 |     },
> 64 |     noiseMap() {
     |     ^
  65 |       return this.$store.state.scenario.noiseMap;
  66 |     },
  67 |     stormWater() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:67:5:
  65 |       return this.$store.state.scenario.noiseMap;
  66 |     },
> 67 |     stormWater() {
     |     ^
  68 |       return this.$store.state.scenario.stormWater;
  69 |     },
  70 |     wind() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:70:5:
  68 |       return this.$store.state.scenario.stormWater;
  69 |     },
> 70 |     wind() {
     |     ^
  71 |       return this.$store.state.scenario.windLayer;
  72 |     },
  73 |     sunExposure() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:73:5:
  71 |       return this.$store.state.scenario.windLayer;
  72 |     },
> 73 |     sunExposure() {
     |     ^
  74 |       return this.$store.state.scenario.sunExposureLayer;
  75 |     },
  76 |     multiLayerAnalysis() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:76:5:
  74 |       return this.$store.state.scenario.sunExposureLayer;
  75 |     },
> 76 |     multiLayerAnalysis() {
     |     ^
  77 |       return this.$store.state.scenario.multiLayerAnalysisMap;
  78 |     },
  79 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:81:5:
  79 |   },
  80 |   watch: {
> 81 |     activeAbmSet() {},
     |     ^
  82 |     heatMap(newVal, oldVal) {
  83 |       console.log(newVal, oldVal);
  84 |     },


error: Unexpected empty method 'activeAbmSet' (@typescript-eslint/no-empty-function) at src/components/Menu/Viewbar.vue:81:20:
  79 |   },
  80 |   watch: {
> 81 |     activeAbmSet() {},
     |                    ^
  82 |     heatMap(newVal, oldVal) {
  83 |       console.log(newVal, oldVal);
  84 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:82:5:
  80 |   watch: {
  81 |     activeAbmSet() {},
> 82 |     heatMap(newVal, oldVal) {
     |     ^
  83 |       console.log(newVal, oldVal);
  84 |     },
  85 |     noiseMap() {},


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:82:13:
  80 |   watch: {
  81 |     activeAbmSet() {},
> 82 |     heatMap(newVal, oldVal) {
     |             ^
  83 |       console.log(newVal, oldVal);
  84 |     },
  85 |     noiseMap() {},


warning: Argument 'oldVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:82:21:
  80 |   watch: {
  81 |     activeAbmSet() {},
> 82 |     heatMap(newVal, oldVal) {
     |                     ^
  83 |       console.log(newVal, oldVal);
  84 |     },
  85 |     noiseMap() {},


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:85:5:
  83 |       console.log(newVal, oldVal);
  84 |     },
> 85 |     noiseMap() {},
     |     ^
  86 |     stormWater() {},
  87 |     wind(newVal, oldVal) {
  88 |       this.visibleLayers.wind = newVal;


error: Unexpected empty method 'noiseMap' (@typescript-eslint/no-empty-function) at src/components/Menu/Viewbar.vue:85:16:
  83 |       console.log(newVal, oldVal);
  84 |     },
> 85 |     noiseMap() {},
     |                ^
  86 |     stormWater() {},
  87 |     wind(newVal, oldVal) {
  88 |       this.visibleLayers.wind = newVal;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:86:5:
  84 |     },
  85 |     noiseMap() {},
> 86 |     stormWater() {},
     |     ^
  87 |     wind(newVal, oldVal) {
  88 |       this.visibleLayers.wind = newVal;
  89 |     },


error: Unexpected empty method 'stormWater' (@typescript-eslint/no-empty-function) at src/components/Menu/Viewbar.vue:86:18:
  84 |     },
  85 |     noiseMap() {},
> 86 |     stormWater() {},
     |                  ^
  87 |     wind(newVal, oldVal) {
  88 |       this.visibleLayers.wind = newVal;
  89 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:87:5:
  85 |     noiseMap() {},
  86 |     stormWater() {},
> 87 |     wind(newVal, oldVal) {
     |     ^
  88 |       this.visibleLayers.wind = newVal;
  89 |     },
  90 |     focusAreasShown(newVal, oldVal) {


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:87:10:
  85 |     noiseMap() {},
  86 |     stormWater() {},
> 87 |     wind(newVal, oldVal) {
     |          ^
  88 |       this.visibleLayers.wind = newVal;
  89 |     },
  90 |     focusAreasShown(newVal, oldVal) {


warning: Argument 'oldVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:87:18:
  85 |     noiseMap() {},
  86 |     stormWater() {},
> 87 |     wind(newVal, oldVal) {
     |                  ^
  88 |       this.visibleLayers.wind = newVal;
  89 |     },
  90 |     focusAreasShown(newVal, oldVal) {


warning: 'oldVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Viewbar.vue:87:18:
  85 |     noiseMap() {},
  86 |     stormWater() {},
> 87 |     wind(newVal, oldVal) {
     |                  ^
  88 |       this.visibleLayers.wind = newVal;
  89 |     },
  90 |     focusAreasShown(newVal, oldVal) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:90:5:
  88 |       this.visibleLayers.wind = newVal;
  89 |     },
> 90 |     focusAreasShown(newVal, oldVal) {
     |     ^
  91 |       this.visibleLayers.focusAreas = newVal;
  92 |     },
  93 |     legendVisible(newVale, oldVal) {


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:90:21:
  88 |       this.visibleLayers.wind = newVal;
  89 |     },
> 90 |     focusAreasShown(newVal, oldVal) {
     |                     ^
  91 |       this.visibleLayers.focusAreas = newVal;
  92 |     },
  93 |     legendVisible(newVale, oldVal) {


warning: Argument 'oldVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:90:29:
  88 |       this.visibleLayers.wind = newVal;
  89 |     },
> 90 |     focusAreasShown(newVal, oldVal) {
     |                             ^
  91 |       this.visibleLayers.focusAreas = newVal;
  92 |     },
  93 |     legendVisible(newVale, oldVal) {


warning: 'oldVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Viewbar.vue:90:29:
  88 |       this.visibleLayers.wind = newVal;
  89 |     },
> 90 |     focusAreasShown(newVal, oldVal) {
     |                             ^
  91 |       this.visibleLayers.focusAreas = newVal;
  92 |     },
  93 |     legendVisible(newVale, oldVal) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:93:5:
  91 |       this.visibleLayers.focusAreas = newVal;
  92 |     },
> 93 |     legendVisible(newVale, oldVal) {
     |     ^
  94 |       console.log("legendVisible", newVale);
  95 |     },
  96 |     visibleLayers: {


warning: Argument 'newVale' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:93:19:
  91 |       this.visibleLayers.focusAreas = newVal;
  92 |     },
> 93 |     legendVisible(newVale, oldVal) {
     |                   ^
  94 |       console.log("legendVisible", newVale);
  95 |     },
  96 |     visibleLayers: {


warning: Argument 'oldVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:93:28:
  91 |       this.visibleLayers.focusAreas = newVal;
  92 |     },
> 93 |     legendVisible(newVale, oldVal) {
     |                            ^
  94 |       console.log("legendVisible", newVale);
  95 |     },
  96 |     visibleLayers: {


warning: 'oldVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Viewbar.vue:93:28:
  91 |       this.visibleLayers.focusAreas = newVal;
  92 |     },
> 93 |     legendVisible(newVale, oldVal) {
     |                            ^
  94 |       console.log("legendVisible", newVale);
  95 |     },
  96 |     visibleLayers: {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:98:7:
   96 |     visibleLayers: {
   97 |       deep: true,
>  98 |       handler() {
      |       ^
   99 |         console.warn("visible layers watched");
  100 |         this.updateLayerVisibility();
  101 |       },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:105:5:
  103 |   },
  104 |   methods: {
> 105 |     toggleUi() {
      |     ^
  106 |       this.showUi = !this.showUi;
  107 |       this.$store.commit("scenario/showUi", this.showUi);
  108 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:109:5:
  107 |       this.$store.commit("scenario/showUi", this.showUi);
  108 |     },
> 109 |     resetView() {
      |     ^
  110 |       this.map.flyTo({
  111 |         center: this.view.center,
  112 |         zoom: this.view.zoom,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:126:5:
  124 |           )
  125 |         }, */
> 126 |     colorizeBuildingsByUseType() {
      |     ^
  127 |       this.$store.commit("scenario/loader", true);
  128 |       console.log(this.loader);
  129 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:164:5:
  162 |       console.log(this.loader);
  163 |     },
> 164 |     updateBuildingVisibility() {
      |     ^
  165 |       console.log(this.layerIds);
  166 |       if (!this.visibleBuildings.show) {
  167 |         this.map.setLayoutProperty("groundfloor", "visibility", "none");


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:182:5:
  180 |       }
  181 |     },
> 182 |     showBuildingUses() {
      |     ^
  183 |       this.legendVisible = !this.legendVisible;
  184 |       this.colorizeBuildingsByUseType();
  185 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:188:5:
  186 | 
  187 |     // todo this really needs to be refactored to use a central function which takes layers as arguments
> 188 |     updateLayerVisibility() {
      |     ^
  189 |       console.log(this.layerIds);
  190 |       if (this.layerIds.indexOf("abmTrips") > -1) {
  191 |         if (this.visibleLayers.abm) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:293:5:
  291 |       }
  292 |     },
> 293 |     checkHighlights(active) {
      |     ^
  294 |       Object.entries(this.visibility).map(([key, value]) => {
  295 |         return key == active
  296 |           ? (this.visibility[key] = !this.visibility[key])


warning: Argument 'active' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:293:21:
  291 |       }
  292 |     },
> 293 |     checkHighlights(active) {
      |                     ^
  294 |       Object.entries(this.visibility).map(([key, value]) => {
  295 |         return key == active
  296 |           ? (this.visibility[key] = !this.visibility[key])


warning: 'value' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Viewbar.vue:294:50:
  292 |     },
  293 |     checkHighlights(active) {
> 294 |       Object.entries(this.visibility).map(([key, value]) => {
      |                                                  ^
  295 |         return key == active
  296 |           ? (this.visibility[key] = !this.visibility[key])
  297 |           : (this.visibility[key] = false);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:300:5:
  298 |       });
  299 |     },
> 300 |     async adjustPitch() {
      |     ^
  301 |       var zoom = this.map.getZoom();
  302 |       var pitch = this.map.getPitch();
  303 |       var bearing = this.map.getBearing();


warning: 'bearing' is assigned a value but never used (@typescript-eslint/no-unused-vars) at src/components/Menu/Viewbar.vue:303:11:
  301 |       var zoom = this.map.getZoom();
  302 |       var pitch = this.map.getPitch();
> 303 |       var bearing = this.map.getBearing();
      |           ^
  304 | 
  305 |       if (zoom > 16 || zoom < 9) {
  306 |         this.map.setZoom(13);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:317:5:
  315 |             }*/
  316 |     },
> 317 |     presentationMode() {
      |     ^
  318 |       this.presentationRunning = !this.presentationRunning;
  319 | 
  320 |       if (this.presentationRunning) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:324:5:
  322 |       }
  323 |     },
> 324 |     rotateCamera(timestamp) {
      |     ^
  325 |       this.map.rotateTo((timestamp / 200) % 360, { duration: 0 });
  326 |       // Request the next frame of the animation.
  327 |       if (this.presentationRunning) {


warning: Argument 'timestamp' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Menu/Viewbar.vue:324:18:
  322 |       }
  323 |     },
> 324 |     rotateCamera(timestamp) {
      |                  ^
  325 |       this.map.rotateTo((timestamp / 200) % 360, { duration: 0 });
  326 |       // Request the next frame of the animation.
  327 |       if (this.presentationRunning) {


warning: 'bridgeVeddelOptions' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/AbmScenario.vue:7:3:
   5 |   bridges,
   6 |   moduleSettingNames,
>  7 |   bridgeVeddelOptions,
     |   ^
   8 |   mainStreetOrientationOptions,
   9 |   blockPermeabilityOptions,
  10 |   roofAmenitiesOptions,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:27:3:
  25 |     restrictedAccess: Boolean,
  26 |   },
> 27 |   data() {
     |   ^
  28 |     return {
  29 |       activeDivision: null,
  30 |       componentDivisions: [],


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:101:5:
   99 |       ["car", "scenario/scenarioViewFilters/modes/" + filterOptions.car],
  100 |     ]),
> 101 |     abmStats() {
      |     ^
  102 |       return this.$store.state.scenario.abmStats;
  103 |     },
  104 |     amenityStats() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:104:5:
  102 |       return this.$store.state.scenario.abmStats;
  103 |     },
> 104 |     amenityStats() {
      |     ^
  105 |       return this.$store.state.scenario.amenityStats;
  106 |     },
  107 |     filterSet() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:107:5:
  105 |       return this.$store.state.scenario.amenityStats;
  106 |     },
> 107 |     filterSet() {
      |     ^
  108 |       return this.$store.state.scenario.clusteredAbmData;
  109 |     },
  110 |     activeAbmSet() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:110:5:
  108 |       return this.$store.state.scenario.clusteredAbmData;
  109 |     },
> 110 |     activeAbmSet() {
      |     ^
  111 |       return this.$store.state.scenario.activeAbmSet;
  112 |     },
  113 |     filterActive() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:113:5:
  111 |       return this.$store.state.scenario.activeAbmSet;
  112 |     },
> 113 |     filterActive() {
      |     ^
  114 |       return this.$store.state.scenario.filterActive;
  115 |     },
  116 |     heatMap() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:116:5:
  114 |       return this.$store.state.scenario.filterActive;
  115 |     },
> 116 |     heatMap() {
      |     ^
  117 |       return this.$store.state.scenario.heatMap;
  118 |     },
  119 |     showUi() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:119:5:
  117 |       return this.$store.state.scenario.heatMap;
  118 |     },
> 119 |     showUi() {
      |     ^
  120 |       return this.$store.state.scenario.showUi;
  121 |     },
  122 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:124:5:
  122 |   },
  123 |   watch: {
> 124 |     resultsOutdated(newVal, oldVal) {
      |     ^
  125 |       console.log("changes made");
  126 |       console.log(newVal, oldVal);
  127 |     },


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:124:21:
  122 |   },
  123 |   watch: {
> 124 |     resultsOutdated(newVal, oldVal) {
      |                     ^
  125 |       console.log("changes made");
  126 |       console.log(newVal, oldVal);
  127 |     },


warning: Argument 'oldVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:124:29:
  122 |   },
  123 |   watch: {
> 124 |     resultsOutdated(newVal, oldVal) {
      |                             ^
  125 |       console.log("changes made");
  126 |       console.log(newVal, oldVal);
  127 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:128:5:
  126 |       console.log(newVal, oldVal);
  127 |     },
> 128 |     filterSet() {
      |     ^
  129 |       for (var key in this.filterSet) {
  130 |         this.filterSettings[key] = true;
  131 |       }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:133:5:
  131 |       }
  132 |     },
> 133 |     heatMap() {
      |     ^
  134 |       if (this.heatMap) {
  135 |         this.btnlabel = "Hide Aggregation Layer";
  136 |       } else if (!this.heatMap) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:140:5:
  138 |       }
  139 |     },
> 140 |     activeDivision() {
      |     ^
  141 |       if (this.activeDivision === "Dashboard") {
  142 |         // load map layer with focus areas
  143 |         this.map.setLayoutProperty(


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:162:12:
  160 |     },
  161 |   },
> 162 |   mounted: function () {
      |            ^
  163 |     // hide all other layers
  164 |     this.$store.dispatch("hideAllLayersButThese", getAbmLayerIds());
  165 |     // switch time graph to ABM


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:181:5:
  179 |   },
  180 |   methods: {
> 181 |     confirmSettings() {
      |     ^
  182 |       // update currentlyShowScenarioSettigns
  183 |       this.currentlyShownScenarioSettings = JSON.parse(
  184 |         JSON.stringify(this.moduleSettings)


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:191:5:
  189 |       this.$store.dispatch("scenario/updateAbmDesignScenario");
  190 |     },
> 191 |     changeHeatMapData() {
      |     ^
  192 |       if (this.adjustRange[0] > 8 || this.adjustRange[1] < 23) {
  193 |         this.$store.commit("scenario/loop", true);
  194 |       } else {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:202:5:
  200 |       this.$store.dispatch("scenario/updateLayers", "heatMap");
  201 |     },
> 202 |     setHeatMapTimes(x, y) {
      |     ^
  203 |       this.adjustRange = [x, y];
  204 |       this.changeHeatMapData();
  205 |     },


warning: Argument 'x' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:202:21:
  200 |       this.$store.dispatch("scenario/updateLayers", "heatMap");
  201 |     },
> 202 |     setHeatMapTimes(x, y) {
      |                     ^
  203 |       this.adjustRange = [x, y];
  204 |       this.changeHeatMapData();
  205 |     },


warning: Argument 'y' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:202:24:
  200 |       this.$store.dispatch("scenario/updateLayers", "heatMap");
  201 |     },
> 202 |     setHeatMapTimes(x, y) {
      |                        ^
  203 |       this.adjustRange = [x, y];
  204 |       this.changeHeatMapData();
  205 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:206:5:
  204 |       this.changeHeatMapData();
  205 |     },
> 206 |     heatMapActive() {
      |     ^
  207 |       this.$store.commit("scenario/heatMap", !this.heatMap);
  208 |     },
  209 |     updateFilter() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:209:5:
  207 |       this.$store.commit("scenario/heatMap", !this.heatMap);
  208 |     },
> 209 |     updateFilter() {
      |     ^
  210 |       this.$store.commit("scenario/loader", true);
  211 |       this.$store.dispatch("scenario/filterAbmCore", this.filterSettings);
  212 |       this.$store.commit("scenario/filterSettings", { ...this.filterSettings });


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:223:5:
  221 |       }
  222 |     },
> 223 |     loadWorkshopScenario(scenarioId) {
      |     ^
  224 |       this.$store.dispatch("scenario/loadWorkshopScenario", scenarioId);
  225 |     },
  226 |   },


warning: Argument 'scenarioId' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/AbmScenario.vue:223:26:
  221 |       }
  222 |     },
> 223 |     loadWorkshopScenario(scenarioId) {
      |                          ^
  224 |       this.$store.dispatch("scenario/loadWorkshopScenario", scenarioId);
  225 |     },
  226 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/DashboardCharts.vue:10:3:
   8 | export default {
   9 |   name: "DashboardCharts",
> 10 |   data() {
     |   ^
  11 |     return {
  12 |       radarChart: null,
  13 |       barChart: null,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/DashboardCharts.vue:33:3:
  31 |     };
  32 |   },
> 33 |   mounted() {
     |   ^
  34 |     this.renderBarChart();
  35 |     this.renderRadarChart();
  36 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/DashboardCharts.vue:37:3:
  35 |     this.renderRadarChart();
  36 |   },
> 37 |   updated() {},
     |   ^
  38 |   created() {},
  39 |   components: {},
  40 |   methods: {


error: Unexpected empty method 'updated' (@typescript-eslint/no-empty-function) at src/components/Scenario/DashboardCharts.vue:37:13:
  35 |     this.renderRadarChart();
  36 |   },
> 37 |   updated() {},
     |             ^
  38 |   created() {},
  39 |   components: {},
  40 |   methods: {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/DashboardCharts.vue:38:3:
  36 |   },
  37 |   updated() {},
> 38 |   created() {},
     |   ^
  39 |   components: {},
  40 |   methods: {
  41 |     renderBarChart() {


error: Unexpected empty method 'created' (@typescript-eslint/no-empty-function) at src/components/Scenario/DashboardCharts.vue:38:13:
  36 |   },
  37 |   updated() {},
> 38 |   created() {},
     |             ^
  39 |   components: {},
  40 |   methods: {
  41 |     renderBarChart() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/DashboardCharts.vue:41:5:
  39 |   components: {},
  40 |   methods: {
> 41 |     renderBarChart() {
     |     ^
  42 |       this.barChartReady = false;
  43 | 
  44 |       // destroy the old chart


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/DashboardCharts.vue:149:5:
  147 |     },
  148 |     /** radar chart for abmStats **/
> 149 |     renderRadarChart() {
      |     ^
  150 |       this.radarChartReady = false;
  151 | 
  152 |       // destroy the old chart


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/DashboardCharts.vue:312:5:
  310 |   },
  311 |   watch: {
> 312 |     updateAbmStatsChart() {
      |     ^
  313 |       console.log("updating the chart");
  314 |       if (this.updateAbmStatsChart) {
  315 |         this.renderRadarChart();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/DashboardCharts.vue:318:5:
  316 |       }
  317 |     },
> 318 |     updateAmenityStatsChart() {
      |     ^
  319 |       console.log("updating the BAR chart");
  320 |       if (this.updateAmenityStatsChart) {
  321 |         this.renderBarChart();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Legend.vue:10:3:
   8 |     showAtBottom: Boolean,
   9 |   },
> 10 |   data() {
     |   ^
  11 |     return {
  12 |       legendExplanation: legends[this.topic]["headline"],
  13 |       legendCategories: legends[this.topic]["categories"],


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Legend.vue:18:3:
  16 |     };
  17 |   },
> 18 |   mounted() {
     |   ^
  19 |     console.log("test", this.showAtBottom);
  20 |   },
  21 | };


error: Custom elements in iteration require 'v-bind:key' directives (vue/valid-v-for) at src/components/Scenario/Legend.vue:31:9:
  29 |           labelLowValues
  30 |         }}</v-col>
> 31 |         <v-col
     |         ^
  32 |           no-gutters
  33 |           v-for="item in legendCategories"
  34 |           class="pa-0 ml-1"


error: Custom elements in iteration require 'v-bind:key' directives (vue/valid-v-for) at src/components/Scenario/Legend.vue:53:7:
  51 | 
  52 |       <!-- Legend categories as v-for -->
> 53 |       <v-row
     |       ^
  54 |         no-gutters
  55 |         v-for="item in legendCategories"
  56 |         class="mb-0 ml-0"


warning: 'Chart' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/LogosAIT.vue:3:8:
  1 | <script>
  2 | import { mapState } from "vuex";
> 3 | import Chart from "chart.js";
    |        ^
  4 | import { generateStoreGetterSetter } from "@/store/utils/generators";
  5 | 
  6 | export default {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/LogosAIT.vue:8:3:
   6 | export default {
   7 |   name: "LogosAIT",
>  8 |   data() {
     |   ^
   9 |     return {
  10 |       images: {
  11 |         logoAIT: require("@/assets/AIT_Logo_new.png"),


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/LogosAIT.vue:20:3:
  18 |     };
  19 |   },
> 20 |   mounted() {},
     |   ^
  21 |   updated() {},
  22 |   created() {
  23 |     document.onkeydown = this.onkeydown;


error: Unexpected empty method 'mounted' (@typescript-eslint/no-empty-function) at src/components/Scenario/LogosAIT.vue:20:13:
  18 |     };
  19 |   },
> 20 |   mounted() {},
     |             ^
  21 |   updated() {},
  22 |   created() {
  23 |     document.onkeydown = this.onkeydown;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/LogosAIT.vue:21:3:
  19 |   },
  20 |   mounted() {},
> 21 |   updated() {},
     |   ^
  22 |   created() {
  23 |     document.onkeydown = this.onkeydown;
  24 |   },


error: Unexpected empty method 'updated' (@typescript-eslint/no-empty-function) at src/components/Scenario/LogosAIT.vue:21:13:
  19 |   },
  20 |   mounted() {},
> 21 |   updated() {},
     |             ^
  22 |   created() {
  23 |     document.onkeydown = this.onkeydown;
  24 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/LogosAIT.vue:22:3:
  20 |   mounted() {},
  21 |   updated() {},
> 22 |   created() {
     |   ^
  23 |     document.onkeydown = this.onkeydown;
  24 |   },
  25 |   components: {},


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/LogosAIT.vue:30:5:
  28 |     ...mapState(["activeMenuComponent"]),
  29 |     ...generateStoreGetterSetter([]),
> 30 |     windowWidth() {
     |     ^
  31 |       return this.$vuetify.breakpoint.width;
  32 |     },
  33 |   },


warning: 'noiseSettingsNames' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/MultiLayerAnalysis.vue:4:10:
  2 | import { mapState } from "vuex";
  3 | import { generateStoreGetterSetter } from "@/store/utils/generators.ts";
> 4 | import { noiseSettingsNames } from "@/store/noise";
    |          ^
  5 | import {
  6 |   filterAndScaleLayerData,
  7 |   showMultiLayerAnalysis,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:17:3:
  15 |   name: "MultiLayerAnalysis",
  16 |   components: {},
> 17 |   data() {
     |   ^
  18 |     return {
  19 |       activeDivision: null,
  20 |       componentDivisions: [],


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:123:5:
  121 |       ["abmSettings", "scenario/moduleSettings"],
  122 |     ]),
> 123 |     currentAbmResult() {
      |     ^
  124 |       return this.$store.state.scenario.activeAbmSet;
  125 |     },
  126 |     abmStatsMultiLayerAnalysis() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:126:5:
  124 |       return this.$store.state.scenario.activeAbmSet;
  125 |     },
> 126 |     abmStatsMultiLayerAnalysis() {
      |     ^
  127 |       return this.$store.state.scenario.abmStatsMultiLayer;
  128 |     },
  129 |     currentNoiseResult() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:129:5:
  127 |       return this.$store.state.scenario.abmStatsMultiLayer;
  128 |     },
> 129 |     currentNoiseResult() {
      |     ^
  130 |       return this.$store.state.scenario.currentNoiseGeoJson;
  131 |     },
  132 |     currentWindResult() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:132:5:
  130 |       return this.$store.state.scenario.currentNoiseGeoJson;
  131 |     },
> 132 |     currentWindResult() {
      |     ^
  133 |       return this.$store.state.scenario.windResultGeoJson;
  134 |     },
  135 |     currentSunResult() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:135:5:
  133 |       return this.$store.state.scenario.windResultGeoJson;
  134 |     },
> 135 |     currentSunResult() {
      |     ^
  136 |       return this.$store.state.scenario.sunExposureGeoJson;
  137 |     },
  138 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:140:5:
  138 |   },
  139 |   watch: {
> 140 |     layerChoice_1(newVal, oldVal) {
      |     ^
  141 |       // update options for selectable indexes (to be combined to new layer)
  142 |       this.criteriaOptions_1 = this.availableResultCriteria.filter((option) => {
  143 |         return option.layerName === this.layerChoice_1;


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:140:19:
  138 |   },
  139 |   watch: {
> 140 |     layerChoice_1(newVal, oldVal) {
      |                   ^
  141 |       // update options for selectable indexes (to be combined to new layer)
  142 |       this.criteriaOptions_1 = this.availableResultCriteria.filter((option) => {
  143 |         return option.layerName === this.layerChoice_1;


warning: 'newVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/MultiLayerAnalysis.vue:140:19:
  138 |   },
  139 |   watch: {
> 140 |     layerChoice_1(newVal, oldVal) {
      |                   ^
  141 |       // update options for selectable indexes (to be combined to new layer)
  142 |       this.criteriaOptions_1 = this.availableResultCriteria.filter((option) => {
  143 |         return option.layerName === this.layerChoice_1;


warning: Argument 'oldVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:140:27:
  138 |   },
  139 |   watch: {
> 140 |     layerChoice_1(newVal, oldVal) {
      |                           ^
  141 |       // update options for selectable indexes (to be combined to new layer)
  142 |       this.criteriaOptions_1 = this.availableResultCriteria.filter((option) => {
  143 |         return option.layerName === this.layerChoice_1;


warning: 'oldVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/MultiLayerAnalysis.vue:140:27:
  138 |   },
  139 |   watch: {
> 140 |     layerChoice_1(newVal, oldVal) {
      |                           ^
  141 |       // update options for selectable indexes (to be combined to new layer)
  142 |       this.criteriaOptions_1 = this.availableResultCriteria.filter((option) => {
  143 |         return option.layerName === this.layerChoice_1;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:148:5:
  146 |       this.sliderValues_1 = this.criteriaChoice_1.range;
  147 |     },
> 148 |     layerChoice_2(newVal, oldVal) {
      |     ^
  149 |       this.criteriaOptions_2 = this.availableResultCriteria.filter((option) => {
  150 |         return option.layerName === this.layerChoice_2;
  151 |       });


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:148:19:
  146 |       this.sliderValues_1 = this.criteriaChoice_1.range;
  147 |     },
> 148 |     layerChoice_2(newVal, oldVal) {
      |                   ^
  149 |       this.criteriaOptions_2 = this.availableResultCriteria.filter((option) => {
  150 |         return option.layerName === this.layerChoice_2;
  151 |       });


warning: 'newVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/MultiLayerAnalysis.vue:148:19:
  146 |       this.sliderValues_1 = this.criteriaChoice_1.range;
  147 |     },
> 148 |     layerChoice_2(newVal, oldVal) {
      |                   ^
  149 |       this.criteriaOptions_2 = this.availableResultCriteria.filter((option) => {
  150 |         return option.layerName === this.layerChoice_2;
  151 |       });


warning: Argument 'oldVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:148:27:
  146 |       this.sliderValues_1 = this.criteriaChoice_1.range;
  147 |     },
> 148 |     layerChoice_2(newVal, oldVal) {
      |                           ^
  149 |       this.criteriaOptions_2 = this.availableResultCriteria.filter((option) => {
  150 |         return option.layerName === this.layerChoice_2;
  151 |       });


warning: 'oldVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/MultiLayerAnalysis.vue:148:27:
  146 |       this.sliderValues_1 = this.criteriaChoice_1.range;
  147 |     },
> 148 |     layerChoice_2(newVal, oldVal) {
      |                           ^
  149 |       this.criteriaOptions_2 = this.availableResultCriteria.filter((option) => {
  150 |         return option.layerName === this.layerChoice_2;
  151 |       });


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:157:7:
  155 |     criteriaChoice_1: {
  156 |       deep: true,
> 157 |       handler() {
      |       ^
  158 |         if (this.criteriaChoice_1.label === this.criteriaChoice_2.label) {
  159 |           this.showError = true;
  160 |         } else {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:176:7:
  174 |     criteriaChoice_2: {
  175 |       deep: true,
> 176 |       handler() {
      |       ^
  177 |         if (this.criteriaChoice_1.label === this.criteriaChoice_2.label) {
  178 |           this.showError = true;
  179 |         } else {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:195:7:
  193 |     sliderValues_1: {
  194 |       deep: true,
> 195 |       handler() {
      |       ^
  196 |         const request = {
  197 |           layerName: this.criteriaChoice_1.value,
  198 |           layerRange: this.criteriaChoice_1.range,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:213:7:
  211 |     sliderValues_2: {
  212 |       deep: true,
> 213 |       handler() {
      |       ^
  214 |         const request = {
  215 |           layerName: this.criteriaChoice_2.value,
  216 |           layerRange: this.criteriaChoice_2.range,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:229:5:
  227 |       },
  228 |     },
> 229 |     enableCriteriaLayer_1(showLayer, old) {
      |     ^
  230 |       if (showLayer) {
  231 |         if (this.enableCriteriaLayer_2) {
  232 |           this.enableCriteriaLayer_2 = false;


warning: Argument 'showLayer' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:229:27:
  227 |       },
  228 |     },
> 229 |     enableCriteriaLayer_1(showLayer, old) {
      |                           ^
  230 |       if (showLayer) {
  231 |         if (this.enableCriteriaLayer_2) {
  232 |           this.enableCriteriaLayer_2 = false;


warning: Argument 'old' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:229:38:
  227 |       },
  228 |     },
> 229 |     enableCriteriaLayer_1(showLayer, old) {
      |                                      ^
  230 |       if (showLayer) {
  231 |         if (this.enableCriteriaLayer_2) {
  232 |           this.enableCriteriaLayer_2 = false;


warning: 'old' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/MultiLayerAnalysis.vue:229:38:
  227 |       },
  228 |     },
> 229 |     enableCriteriaLayer_1(showLayer, old) {
      |                                      ^
  230 |       if (showLayer) {
  231 |         if (this.enableCriteriaLayer_2) {
  232 |           this.enableCriteriaLayer_2 = false;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:259:5:
  257 |       }
  258 |     },
> 259 |     enableCriteriaLayer_2(showLayer, old) {
      |     ^
  260 |       if (showLayer) {
  261 |         if (this.enableCriteriaLayer_1) {
  262 |           this.enableCriteriaLayer_1 = false;


warning: Argument 'showLayer' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:259:27:
  257 |       }
  258 |     },
> 259 |     enableCriteriaLayer_2(showLayer, old) {
      |                           ^
  260 |       if (showLayer) {
  261 |         if (this.enableCriteriaLayer_1) {
  262 |           this.enableCriteriaLayer_1 = false;


warning: Argument 'old' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:259:38:
  257 |       }
  258 |     },
> 259 |     enableCriteriaLayer_2(showLayer, old) {
      |                                      ^
  260 |       if (showLayer) {
  261 |         if (this.enableCriteriaLayer_1) {
  262 |           this.enableCriteriaLayer_1 = false;


warning: 'old' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/MultiLayerAnalysis.vue:259:38:
  257 |       }
  258 |     },
> 259 |     enableCriteriaLayer_2(showLayer, old) {
      |                                      ^
  260 |       if (showLayer) {
  261 |         if (this.enableCriteriaLayer_1) {
  262 |           this.enableCriteriaLayer_1 = false;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:291:7:
  289 |     layersReadyToCompare: {
  290 |       deep: true,
> 291 |       handler() {
      |       ^
  292 |         // check if at least to layers are available for analysis
  293 |         if (!(this.layersReadyToCompare.length >= 2)) {
  294 |           this.showMissingScenarios = true;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:314:3:
  312 |     },
  313 |   },
> 314 |   async beforeMount() {
      |   ^
  315 |     this.addImageToMap();
  316 |     this.getResultsFromStore();
  317 |     this.determineMissingScenarios();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:320:12:
  318 |     this.updateLayerSelectionDropdowns();
  319 |   },
> 320 |   mounted: function () {
      |            ^
  321 |     this.logicOperator = this.logicOptions[0];
  322 | 
  323 |     // calc input statistics, if all scenarios chosen


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:345:5:
  343 |   },
  344 |   methods: {
> 345 |     addImageToMap() {
      |     ^
  346 |       // add image to map if necessary . For result annotation layer.
  347 |       if (!$store.state.map.hasImage("mdi-information")) {
  348 |         const map = this.$store.state.map;


error: '$store' is not defined (no-undef) at src/components/Scenario/MultiLayerAnalysis.vue:347:12:
  345 |     addImageToMap() {
  346 |       // add image to map if necessary . For result annotation layer.
> 347 |       if (!$store.state.map.hasImage("mdi-information")) {
      |            ^
  348 |         const map = this.$store.state.map;
  349 |         map.loadImage(mdiInformationPng, function (error, image) {
  350 |           if (error) throw error;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:355:5:
  353 |       }
  354 |     },
> 355 |     getResultsFromStore() {
      |     ^
  356 |       this.allSimulationResults = {
  357 |         Noise: this.currentNoiseResult,
  358 |         Abm: this.currentAbmResult,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:363:5:
  361 |       };
  362 |     },
> 363 |     determineMissingScenarios() {
      |     ^
  364 |       // iterate over scenario results, if a result is empty add the topic to missing Input scenarios
  365 |       this.getResultsFromStore();
  366 |       this.missingInputScenarios = [];


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:376:5:
  374 |       }
  375 |     },
> 376 |     async loadDefaultResultFor(layerName) {
      |     ^
  377 |       switch (layerName) {
  378 |         case "Sun":
  379 |           await this.$store.dispatch("scenario/addSunExposureLayer");


warning: Argument 'layerName' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:376:32:
  374 |       }
  375 |     },
> 376 |     async loadDefaultResultFor(layerName) {
      |                                ^
  377 |       switch (layerName) {
  378 |         case "Sun":
  379 |           await this.$store.dispatch("scenario/addSunExposureLayer");


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:414:5:
  412 |       this.$store.dispatch("hideAllLayersButThese");
  413 |     },
> 414 |     updateAbmCriteriaLayer() {
      |     ^
  415 |       // check if at least to layers are available for analysis
  416 |       if (this.layerChoice_1 === "Abm") {
  417 |         const request = {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:433:5:
  431 |       }
  432 |     },
> 433 |     updateLayerSelectionDropdowns() {
      |     ^
  434 |       // check if at least to layers are available for analysis
  435 |       if (!(this.layersReadyToCompare.length >= 2)) {
  436 |         return;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:452:5:
  450 |       }
  451 |     },
> 452 |     inputChanged() {
      |     ^
  453 |       if (this.combinedLayers) {
  454 |         this.resultOutdated = true;
  455 |       }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:459:5:
  457 |       this.showError = false;
  458 |     },
> 459 |     getValueForPreset(presetChoice, range) {
      |     ^
  460 |       const minPercent = this.presetOptions[presetChoice][0] / 100;
  461 |       const maxPercent = this.presetOptions[presetChoice][1] / 100;
  462 |       const maxValue = range[1];


warning: Argument 'presetChoice' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:459:23:
  457 |       this.showError = false;
  458 |     },
> 459 |     getValueForPreset(presetChoice, range) {
      |                       ^
  460 |       const minPercent = this.presetOptions[presetChoice][0] / 100;
  461 |       const maxPercent = this.presetOptions[presetChoice][1] / 100;
  462 |       const maxValue = range[1];


warning: Argument 'range' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:459:37:
  457 |       this.showError = false;
  458 |     },
> 459 |     getValueForPreset(presetChoice, range) {
      |                                     ^
  460 |       const minPercent = this.presetOptions[presetChoice][0] / 100;
  461 |       const maxPercent = this.presetOptions[presetChoice][1] / 100;
  462 |       const maxValue = range[1];


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:466:5:
  464 |       return [maxValue * minPercent, maxValue * maxPercent];
  465 |     },
> 466 |     getScenarioDescriptionFor(layerName) {
      |     ^
  467 |       switch (layerName) {
  468 |         case "Sun":
  469 |           return "DEFAULT SCENARIO";


warning: Argument 'layerName' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:466:31:
  464 |       return [maxValue * minPercent, maxValue * maxPercent];
  465 |     },
> 466 |     getScenarioDescriptionFor(layerName) {
      |                               ^
  467 |       switch (layerName) {
  468 |         case "Sun":
  469 |           return "DEFAULT SCENARIO";


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/MultiLayerAnalysis.vue:499:5:
  497 |       }
  498 |     },
> 499 |     async showCombinedLayers() {
      |     ^
  500 |       this.$store.commit("scenario/resultLoading", true);
  501 |       this.$store.commit("scenario/loader", true);
  502 |       this.$store.commit("scenario/loaderTxt", "Combining Layers");


error: Custom elements in iteration require 'v-bind:key' directives (vue/valid-v-for) at src/components/Scenario/MultiLayerAnalysis.vue:634:15:
  632 |               </v-row>
  633 |               <!-- Legend categories as v-for -->
> 634 |               <v-row
      |               ^
  635 |                 v-if="showMissingScenarios"
  636 |                 no-gutters
  637 |                 v-for="layerName in missingInputScenarios"


error: This 'v-if' should be moved to the wrapper element (vue/no-use-v-if-with-v-for) at src/components/Scenario/MultiLayerAnalysis.vue:635:17:
  633 |               <!-- Legend categories as v-for -->
  634 |               <v-row
> 635 |                 v-if="showMissingScenarios"
      |                 ^
  636 |                 no-gutters
  637 |                 v-for="layerName in missingInputScenarios"
  638 |                 class="mb-2 ml-0"


warning: 'mapState' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/NoiseScenario.vue:2:10:
  1 | <script>
> 2 | import { mapState } from "vuex";
    |          ^
  3 | import { generateStoreGetterSetter } from "@/store/utils/generators.ts";
  4 | import { noiseSettingsNames } from "@/store/noise";
  5 | import Legend from "@/components/Scenario/Legend";


warning: 'noiseSettingsNames' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/NoiseScenario.vue:4:10:
  2 | import { mapState } from "vuex";
  3 | import { generateStoreGetterSetter } from "@/store/utils/generators.ts";
> 4 | import { noiseSettingsNames } from "@/store/noise";
    |          ^
  5 | import Legend from "@/components/Scenario/Legend";
  6 | 
  7 | export default {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:15:3:
  13 |     restrictedAccess: Boolean,
  14 |   },
> 15 |   data() {
     |   ^
  16 |     return {
  17 |       activeDivision: null,
  18 |       componentDivisions: [],


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:40:5:
  38 |   },
  39 |   watch: {
> 40 |     maxSpeed(newVal, old) {
     |     ^
  41 |       this.resultOutdated = this.isResultOutdated();
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:40:14:
  38 |   },
  39 |   watch: {
> 40 |     maxSpeed(newVal, old) {
     |              ^
  41 |       this.resultOutdated = this.isResultOutdated();
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },


warning: 'newVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/NoiseScenario.vue:40:14:
  38 |   },
  39 |   watch: {
> 40 |     maxSpeed(newVal, old) {
     |              ^
  41 |       this.resultOutdated = this.isResultOutdated();
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },


warning: Argument 'old' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:40:22:
  38 |   },
  39 |   watch: {
> 40 |     maxSpeed(newVal, old) {
     |                      ^
  41 |       this.resultOutdated = this.isResultOutdated();
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },


warning: 'old' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/NoiseScenario.vue:40:22:
  38 |   },
  39 |   watch: {
> 40 |     maxSpeed(newVal, old) {
     |                      ^
  41 |       this.resultOutdated = this.isResultOutdated();
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:44:5:
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },
> 44 |     trafficPercent(newVal, old) {
     |     ^
  45 |       this.resultOutdated = this.isResultOutdated();
  46 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  47 |     },


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:44:20:
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },
> 44 |     trafficPercent(newVal, old) {
     |                    ^
  45 |       this.resultOutdated = this.isResultOutdated();
  46 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  47 |     },


warning: 'newVal' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/NoiseScenario.vue:44:20:
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },
> 44 |     trafficPercent(newVal, old) {
     |                    ^
  45 |       this.resultOutdated = this.isResultOutdated();
  46 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  47 |     },


warning: Argument 'old' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:44:28:
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },
> 44 |     trafficPercent(newVal, old) {
     |                            ^
  45 |       this.resultOutdated = this.isResultOutdated();
  46 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  47 |     },


warning: 'old' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/NoiseScenario.vue:44:28:
  42 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  43 |     },
> 44 |     trafficPercent(newVal, old) {
     |                            ^
  45 |       this.resultOutdated = this.isResultOutdated();
  46 |       this.scenarioAlreadySaved = this.isScenarioAlreadySaved();
  47 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:49:12:
  47 |     },
  48 |   },
> 49 |   mounted: function () {
     |            ^
  50 |     // hide all other layers
  51 |     this.$store.dispatch("hideAllLayersButThese", ["noise", "trafficCounts"]);
  52 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:67:5:
  65 |   },
  66 |   methods: {
> 67 |     isResultOutdated() {
     |     ^
  68 |       return (
  69 |         this.trafficPercent !== this.noiseScenario["traffic_quota"] ||
  70 |         this.maxSpeed !== this.noiseScenario["max_speed"]


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:73:5:
  71 |       );
  72 |     },
> 73 |     async loadNoiseMap() {
     |     ^
  74 |       this.resultLoading = true;
  75 |       this.$store.dispatch("removeSourceFromMap", "noise", { root: true });
  76 |       this.$store.commit("scenario/currentNoiseGeoJson", null);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:92:5:
  90 |         });
  91 |     },
> 92 |     loadNoiseResults() {
     |     ^
  93 |       this.$store.commit("scenario/noiseScenario", {
  94 |         traffic_quota: this.trafficPercent,
  95 |         max_speed: this.maxSpeed,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:99:5:
   97 |       this.loadNoiseMap();
   98 |     },
>  99 |     loadSavedScenario(savedScenario) {
      |     ^
  100 |       this.trafficPercent = savedScenario["traffic_quota"];
  101 |       this.maxSpeed = savedScenario["max_speed"];
  102 |       this.loadNoiseResults();


warning: Argument 'savedScenario' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:99:23:
   97 |       this.loadNoiseMap();
   98 |     },
>  99 |     loadSavedScenario(savedScenario) {
      |                       ^
  100 |       this.trafficPercent = savedScenario["traffic_quota"];
  101 |       this.maxSpeed = savedScenario["max_speed"];
  102 |       this.loadNoiseResults();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:104:5:
  102 |       this.loadNoiseResults();
  103 |     },
> 104 |     saveNoiseScenario() {
      |     ^
  105 |       console.log("saved scenarios", this.savedNoiseScenarios);
  106 |       if (!this.scenarioAlreadySaved) {
  107 |         // add current scenario to saved scenarios


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/NoiseScenario.vue:114:5:
  112 |       console.log(this.savedNoiseScenarios);
  113 |     },
> 114 |     isScenarioAlreadySaved() {
      |     ^
  115 |       const isSaved =
  116 |         this.savedNoiseScenarios.filter((savedScen) => {
  117 |           return (


error: The "Legend" component has been registered but not used (vue/no-unused-components) at src/components/Scenario/SWScenario.vue:11:5:
   9 |   name: "StormwaterScenario",
  10 |   components: {
> 11 |     Legend: Legend,
     |     ^
  12 |   },
  13 |   data() {
  14 |     return {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:13:3:
  11 |     Legend: Legend,
  12 |   },
> 13 |   data() {
     |   ^
  14 |     return {
  15 |       activeDivision: null,
  16 |       componentDivisions: [],


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:89:5:
  87 |       ["stormWaterScenario", "scenario/" + "stormWaterScenario"], // todo manage stores
  88 |     ]),
> 89 |     stormWater() {
     |     ^
  90 |       return this.$store.state.scenario.stormWater;
  91 |     },
  92 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:94:3:
  92 |   },
  93 |   watch: {},
> 94 |   beforeMount() {
     |   ^
  95 |     // todo remove this
  96 |     this.activateStormWater();
  97 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:98:12:
   96 |     this.activateStormWater();
   97 |   },
>  98 |   mounted: function () {
      |            ^
   99 |     // hide all other layers
  100 |     this.$store.dispatch("hideAllLayersButThese", ["stormwater"]);
  101 |     /*autogenerationg Sub Menu for all divs of Class "division"*/


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:115:5:
  113 |   },
  114 |   methods: {
> 115 |     activateStormWater() {
      |     ^
  116 |       this.$store.commit("scenario/stormWater", true);
  117 |       this.$store.commit("scenario/selectGraph", "sw");
  118 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:119:5:
  117 |       this.$store.commit("scenario/selectGraph", "sw");
  118 |     },
> 119 |     async loadStormwaterMap() {
      |     ^
  120 |       this.resultLoading = true;
  121 |       this.$store.dispatch("removeSourceFromMap", swLayerName, { root: true });
  122 |       this.$store.commit("scenario/swResultGeoJson", null);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:140:5:
  138 |         });
  139 |     },
> 140 |     changeRain(rain) {
      |     ^
  141 |       // TODO rain Amount sometimes is a string and sometimes array. gets used in different contexts. Refactor
  142 |       this.rainAmount = rain;
  143 |       this.$store.commit("scenario/rainAmount", Rain[rain]);


warning: Argument 'rain' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:140:16:
  138 |         });
  139 |     },
> 140 |     changeRain(rain) {
      |                ^
  141 |       // TODO rain Amount sometimes is a string and sometimes array. gets used in different contexts. Refactor
  142 |       this.rainAmount = rain;
  143 |       this.$store.commit("scenario/rainAmount", Rain[rain]);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:145:5:
  143 |       this.$store.commit("scenario/rainAmount", Rain[rain]);
  144 |     },
> 145 |     getRoofTypeString() {
      |     ^
  146 |       if (this.greenRoofs === "extensive") {
  147 |         return "GR-EX1";
  148 |       }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:151:5:
  149 |       return "GR-IN1";
  150 |     },
> 151 |     runScenario() {
      |     ^
  152 |       // update stormwater scenario in store
  153 |       this.makeStormWaterScenario();
  154 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:162:5:
  160 |       this.loadStormwaterMap();
  161 |     },
> 162 |     makeStormWaterScenario() {
      |     ^
  163 |       this.stormWaterScenario = {
  164 |         return_period: this.returnPeriod,
  165 |         flow_path: this.flowPath,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SWScenario.vue:170:5:
  168 |       };
  169 |     },
> 170 |     isResultOutdated() {
      |     ^
  171 |       console.warn("input changed");
  172 |       if (!this.stormWaterScenario) {
  173 |         this.resultOutdated = false;


warning: 'generateStoreGetterSetter' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/SunExposure.vue:3:10:
  1 | <script>
  2 | import { mapState } from "vuex";
> 3 | import { generateStoreGetterSetter } from "@/store/utils/generators.ts";
    |          ^
  4 | import { noiseSettingsNames } from "@/store/noise";
  5 | import hash from "object-hash";
  6 | import Legend from "@/components/Scenario/Legend";


warning: 'noiseSettingsNames' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/SunExposure.vue:4:10:
  2 | import { mapState } from "vuex";
  3 | import { generateStoreGetterSetter } from "@/store/utils/generators.ts";
> 4 | import { noiseSettingsNames } from "@/store/noise";
    |          ^
  5 | import hash from "object-hash";
  6 | import Legend from "@/components/Scenario/Legend";
  7 | 


warning: 'hash' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/SunExposure.vue:5:8:
  3 | import { generateStoreGetterSetter } from "@/store/utils/generators.ts";
  4 | import { noiseSettingsNames } from "@/store/noise";
> 5 | import hash from "object-hash";
    |        ^
  6 | import Legend from "@/components/Scenario/Legend";
  7 | 
  8 | export default {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SunExposure.vue:16:3:
  14 |     restrictedAccess: Boolean,
  15 |   },
> 16 |   data() {
     |   ^
  17 |     return {
  18 |       activeDivision: null,
  19 |       componentDivisions: [],


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SunExposure.vue:33:12:
  31 |   },
  32 |   watch: {},
> 33 |   mounted: function () {
     |            ^
  34 |     // hide all other layers
  35 |     this.$store.dispatch("hideAllLayersButThese", ["sun_exposure"]);
  36 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/SunExposure.vue:51:5:
  49 |   },
  50 |   methods: {
> 51 |     async loadResult() {
     |     ^
  52 |       this.$store.dispatch("scenario/addSunExposureLayer").then(() => {
  53 |         this.$store.commit("scenario/sunExposureLayer", true);
  54 |         this.sunExposureLoaded = true;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:9:5:
   7 | export default {
   8 |     name: 'TimeSheet',
>  9 |     data() {
     |     ^
  10 |         return {
  11 |             timeChart: null,
  12 |             swChart: null,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:44:5:
  42 |         }
  43 |     },
> 44 |     mounted(){
     |     ^
  45 |     },
  46 |     updated(){
  47 |         //this.renderTimeGraph();


error: Unexpected empty method 'mounted' (@typescript-eslint/no-empty-function) at src/components/Scenario/TimeSheet.vue:44:14:
  42 |         }
  43 |     },
> 44 |     mounted(){
     |              ^
  45 |     },
  46 |     updated(){
  47 |         //this.renderTimeGraph();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:46:5:
  44 |     mounted(){
  45 |     },
> 46 |     updated(){
     |     ^
  47 |         //this.renderTimeGraph();
  48 |     },
  49 |     created(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:49:5:
  47 |         //this.renderTimeGraph();
  48 |     },
> 49 |     created(){
     |     ^
  50 |         document.onkeydown = this.onkeydown
  51 |     },
  52 |     components: {},


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:54:9:
  52 |     components: {},
  53 |     methods:{
> 54 |         onkeydown(e){
     |         ^
  55 |             if(e.which === 32){
  56 |                 this.triggerAnimation();
  57 |             }


warning: Argument 'e' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:54:19:
  52 |     components: {},
  53 |     methods:{
> 54 |         onkeydown(e){
     |                   ^
  55 |             if(e.which === 32){
  56 |                 this.triggerAnimation();
  57 |             }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:59:9:
  57 |             }
  58 |         },
> 59 |         triggerAnimation(){
     |         ^
  60 |             /*functionality for play button*/
  61 |             const animationRunning = this.$store.state.scenario.animationRunning;
  62 |             this.$store.commit("scenario/animationRunning", !animationRunning);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:70:9:
  68 |         },
  69 |         // update the time-dependend stormwater deck.gl layer, if the time in the slider changes.
> 70 |         updateSWLayer(){
     |         ^
  71 |             this.$store.commit("scenario/rainTime", this.rainTime);
  72 |             this.$store.dispatch('scenario/updateSWLayerTime');
  73 |         },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:74:9:
  72 |             this.$store.dispatch('scenario/updateSWLayerTime');
  73 |         },
> 74 |         getDataForTimeChart(){
     |         ^
  75 |             this.timeStamps = []
  76 |             this.timeCoords = []
  77 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:89:9:
  87 |             this.renderTimeGraph();
  88 |         },
> 89 |         getFilteredDataForTimeChart(){
     |         ^
  90 |             this.activeAbmTimeCoords = [];
  91 |             Object.entries(this.abmSimpleTimes).forEach(([key, value]) => {
  92 |                 this.transCoords = [];


warning: 'key' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/TimeSheet.vue:91:59:
  89 |         getFilteredDataForTimeChart(){
  90 |             this.activeAbmTimeCoords = [];
> 91 |             Object.entries(this.abmSimpleTimes).forEach(([key, value]) => {
     |                                                           ^
  92 |                 this.transCoords = [];
  93 |                 var spliceArr = [];
  94 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:107:9:
  105 |             this.renderTimeGraph();
  106 |         },
> 107 |         async prepareDataForRunOffGraph() {
      |         ^
  108 |           this.buildingsRunOffResults = []
  109 |           this.streetsRunOffResults = []
  110 |           this.parksRunOffResults = []


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:142:9:
  140 |           return true
  141 |         },
> 142 |         addSubcatchmentResultToAccumulatedRunOffs(totalRunOff, subCatchmentResult) {
      |         ^
  143 |           const timestamps = subCatchmentResult.properties["runoff_results"]["timestamps"]
  144 |           // iterate over every time stamp and add the result to runOffTotal at that time
  145 |           timestamps.forEach(timestamp => {


warning: Argument 'totalRunOff' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:142:51:
  140 |           return true
  141 |         },
> 142 |         addSubcatchmentResultToAccumulatedRunOffs(totalRunOff, subCatchmentResult) {
      |                                                   ^
  143 |           const timestamps = subCatchmentResult.properties["runoff_results"]["timestamps"]
  144 |           // iterate over every time stamp and add the result to runOffTotal at that time
  145 |           timestamps.forEach(timestamp => {


warning: Argument 'subCatchmentResult' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:142:64:
  140 |           return true
  141 |         },
> 142 |         addSubcatchmentResultToAccumulatedRunOffs(totalRunOff, subCatchmentResult) {
      |                                                                ^
  143 |           const timestamps = subCatchmentResult.properties["runoff_results"]["timestamps"]
  144 |           // iterate over every time stamp and add the result to runOffTotal at that time
  145 |           timestamps.forEach(timestamp => {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:158:9:
  156 |           })
  157 |         },
> 158 |         renderTimeGraph(){
      |         ^
  159 |             /*render graph via chart.js*/
  160 |             var ctx = document.getElementById('timeChart').getContext('2d');
  161 |             if (this.timeChart) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:226:9:
  224 |         },
  225 |        // runOff graph
> 226 |         renderSWGraphRunOff(){
      |         ^
  227 | 
  228 |             var ctxSW = document.getElementById('swChart').getContext('2d');
  229 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:340:9:
  338 |                 });
  339 |         },
> 340 |         renderSWGraphRain(){
      |         ^
  341 |            console.log("rain gage", this.rainAmount)
  342 | 
  343 |             var ctxR = document.getElementById('rainChart').getContext('2d');


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:400:9:
  398 |             })
  399 |         },
> 400 |         pauseAnimation(){
      |         ^
  401 |             this.$store.commit("scenario/animationRunning", false);
  402 |         },
  403 |         increaseAnimationSpeed(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:403:9:
  401 |             this.$store.commit("scenario/animationRunning", false);
  402 |         },
> 403 |         increaseAnimationSpeed(){
      |         ^
  404 |             if(this.animationSpeed <= 21) {
  405 |                 this.animationSpeed += 7;
  406 |             } else {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:413:7:
  411 |         },
  412 |       /*change Time via Slider*/
> 413 |       changeCurrentTime(){
      |       ^
  414 |             /*reanimate abm Tripslayer with new currentTime*/
  415 |             if(this.animationRunning) {
  416 |                 const deckLayer = this.$store.state.map.getLayer(abmTripsLayerName);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:420:9:
  418 |             }
  419 |         },
> 420 |         activateComparisonGraph(){
      |         ^
  421 |            this.timeFilter = true;
  422 |            this.filterCoords = [];
  423 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:438:9:
  436 |            this.renderTimeGraph();
  437 |         },
> 438 |         setLoop(){
      |         ^
  439 |             this.loopSetter = !this.loopSetter;
  440 |             this.$store.commit("scenario/setLoop", this.loopSetter);
  441 |         },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:442:9:
  440 |             this.$store.commit("scenario/setLoop", this.loopSetter);
  441 |         },
> 442 |         autoLoopAnimation(){
      |         ^
  443 |             var animationSpeed = 1;
  444 |             var max = 288;
  445 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:467:9:
  465 |           ]
  466 |         ),
> 467 |         selectedRange(){
      |         ^
  468 |             return this.$store.state.scenario.selectedRange;
  469 |         },
  470 |         abmTimePaths(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:470:9:
  468 |             return this.$store.state.scenario.selectedRange;
  469 |         },
> 470 |         abmTimePaths(){
      |         ^
  471 |             return this.$store.state.scenario.abmTimePaths;
  472 |         },
  473 |         activeTimePaths(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:473:9:
  471 |             return this.$store.state.scenario.abmTimePaths;
  472 |         },
> 473 |         activeTimePaths(){
      |         ^
  474 |             return this.$store.state.scenario.activeTimePaths;
  475 |         },
  476 |         abmSimpleTimes(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:476:9:
  474 |             return this.$store.state.scenario.activeTimePaths;
  475 |         },
> 476 |         abmSimpleTimes(){
      |         ^
  477 |             return this.$store.state.scenario.abmSimpleTimes;
  478 |         },
  479 |         currentTimeStamp(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:479:9:
  477 |             return this.$store.state.scenario.abmSimpleTimes;
  478 |         },
> 479 |         currentTimeStamp(){
      |         ^
  480 |             return this.$store.state.scenario.currentTimeStamp;
  481 |         },
  482 |         filterSet(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:482:9:
  480 |             return this.$store.state.scenario.currentTimeStamp;
  481 |         },
> 482 |         filterSet(){
      |         ^
  483 |             return this.$store.state.scenario.clusteredAbmData;
  484 |         },
  485 |         filterSettings(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:485:9:
  483 |             return this.$store.state.scenario.clusteredAbmData;
  484 |         },
> 485 |         filterSettings(){
      |         ^
  486 |             return this.$store.state.scenario.filterSettings;
  487 |         },
  488 |         activeAbmSet(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:488:9:
  486 |             return this.$store.state.scenario.filterSettings;
  487 |         },
> 488 |         activeAbmSet(){
      |         ^
  489 |             return this.$store.state.scenario.activeAbmSet;
  490 |         },
  491 |         heatMapActive(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:491:9:
  489 |             return this.$store.state.scenario.activeAbmSet;
  490 |         },
> 491 |         heatMapActive(){
      |         ^
  492 |             return this.$store.state.scenario.heatMap;
  493 |         },
  494 |         animationRunning(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:494:9:
  492 |             return this.$store.state.scenario.heatMap;
  493 |         },
> 494 |         animationRunning(){
      |         ^
  495 |             return this.$store.state.scenario.animationRunning;
  496 |         },
  497 |         filterActive(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:497:9:
  495 |             return this.$store.state.scenario.animationRunning;
  496 |         },
> 497 |         filterActive(){
      |         ^
  498 |             return this.$store.state.scenario.filterActive;
  499 |         },
  500 |         showUi(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:500:9:
  498 |             return this.$store.state.scenario.filterActive;
  499 |         },
> 500 |         showUi(){
      |         ^
  501 |             return this.$store.state.scenario.showUi;
  502 |         },
  503 |         loop(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:503:9:
  501 |             return this.$store.state.scenario.showUi;
  502 |         },
> 503 |         loop(){
      |         ^
  504 |             return this.$store.state.scenario.loop;
  505 |         },
  506 |         stormWater(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:506:9:
  504 |             return this.$store.state.scenario.loop;
  505 |         },
> 506 |         stormWater(){
      |         ^
  507 |             return this.$store.state.scenario.stormWater;
  508 |         },
  509 |         // TODO hand prop to component in order to decide which graph to show


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:510:9:
  508 |         },
  509 |         // TODO hand prop to component in order to decide which graph to show
> 510 |         selectGraph(){
      |         ^
  511 |             return this.$store.state.scenario.selectGraph;
  512 |         },
  513 |         swResultGeoJson(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:513:9:
  511 |             return this.$store.state.scenario.selectGraph;
  512 |         },
> 513 |         swResultGeoJson(){
      |         ^
  514 |             return this.$store.state.scenario.swResultGeoJson;
  515 |         },
  516 |         rainAmount(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:516:9:
  514 |             return this.$store.state.scenario.swResultGeoJson;
  515 |         },
> 516 |         rainAmount(){
      |         ^
  517 |             return this.$store.state.scenario.rainAmount;
  518 |         }
  519 |     },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:521:9:
  519 |     },
  520 |     watch: {
> 521 |         activeAbmSet(){
      |         ^
  522 |             this.getDataForTimeChart();
  523 |         },
  524 |         heatMapActive(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:524:9:
  522 |             this.getDataForTimeChart();
  523 |         },
> 524 |         heatMapActive(){
      |         ^
  525 |             if(this.heatMapActive) {
  526 |                 this.$store.commit('scenario/animationRunning', false);
  527 |             }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:529:9:
  527 |             }
  528 |         },
> 529 |         currentTimeStamp(){
      |         ^
  530 |             this.currentTime = this.currentTimeStamp;
  531 |         },
  532 |         selectedRange(){


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:532:9:
  530 |             this.currentTime = this.currentTimeStamp;
  531 |         },
> 532 |         selectedRange(){
      |         ^
  533 |             var leftVal = (this.selectedRange[0] - 8) * 60 * 60;
  534 |             var rightVal = (this.selectedRange[1] - 8) * 60 * 60;
  535 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:539:9:
  537 |             this.heatMapRange.width = ((rightVal - leftVal) * 100)/57600 + "%";
  538 |         },
> 539 |         rerenderSwGraph(){
      |         ^
  540 |          if (this.rerenderSwGraph) {
  541 |            this.$store.commit("scenario/selectGraph", "sw");
  542 |            this.prepareDataForRunOffGraph().then(() => {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:550:9:
  548 |         this.rerenderSwGraph = false
  549 |         },
> 550 |         swAnimationRunning(){
      |         ^
  551 |             if(this.swAnimationRunning){this.autoLoopAnimation()};
  552 |         },
  553 |         filterSettings:{


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/TimeSheet.vue:555:13:
  553 |         filterSettings:{
  554 |             deep: true,
> 555 |             handler(){
      |             ^
  556 |                 if(this.filterActive){
  557 |                     this.getFilteredDataForTimeChart();
  558 |                 } else {


error: Parsing error: incorrectly-opened-comment (vue/no-parsing-error) at src/components/Scenario/TimeSheet.vue:642:27:
  640 |                 <div class="filterMenu" v-bind:class="{ visible: checkState }">
  641 |                     <div class="wrapper">
> 642 |                         <! --<div class="hint">
      |                           ^
  643 |                             <p>Select a dataset to compare</p>
  644 |                         </div> -- >
  645 |                         <v-select


error: The template root requires exactly one element (vue/valid-template-root) at src/components/Scenario/TimeSheet.vue:702:9:
  700 |             </div>
  701 |         </div>
> 702 |         <div :class="{ dismiss: selectGraph != 'sw' }" class="button_section abm_buttons">
      |         ^
  703 |             <!-- unused button with no function
  704 |             <div class="btn_wrapper">
  705 |                 <v-btn @click="functionFollowsForm">


error: Parsing error: x-invalid-end-tag (vue/no-parsing-error) at src/components/Scenario/TimeSheet.vue:785:5:
  783 |             </div>
  784 |         </div>
> 785 |     </div>
      |     ^
  786 | </template>
  787 | 
  788 | <style scoped lang="scss">


warning: Parsing error: Unexpected closing tag "div". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags (prettier/prettier) at src/components/Scenario/TimeSheet.vue:785:6:
  783 |             </div>
  784 |         </div>
> 785 |     </div>
      |      ^
  786 | </template>
  787 | 
  788 | <style scoped lang="scss">


warning: 'mapState' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/Wind.vue:2:10:
  1 | <script>
> 2 | import { mapState } from "vuex";
    |          ^
  3 | import { generateStoreGetterSetter } from "@/store/utils/generators.ts";
  4 | import { noiseSettingsNames } from "@/store/noise";
  5 | import hash from "object-hash";


warning: 'noiseSettingsNames' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/Wind.vue:4:10:
  2 | import { mapState } from "vuex";
  3 | import { generateStoreGetterSetter } from "@/store/utils/generators.ts";
> 4 | import { noiseSettingsNames } from "@/store/noise";
    |          ^
  5 | import hash from "object-hash";
  6 | import Legend from "@/components/Scenario/Legend";
  7 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:16:3:
  14 |     restrictedAccess: Boolean,
  15 |   },
> 16 |   data() {
     |   ^
  17 |     return {
  18 |       activeDivision: null,
  19 |       componentDivisions: [],


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:39:5:
  37 |   },
  38 |   watch: {
> 39 |     windSpeed(newVal, old) {
     |     ^
  40 |       console.log("wind speed changed");
  41 |       console.log(newVal);
  42 |       this.resultOutdated = this.isResultOutdated();


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:39:15:
  37 |   },
  38 |   watch: {
> 39 |     windSpeed(newVal, old) {
     |               ^
  40 |       console.log("wind speed changed");
  41 |       console.log(newVal);
  42 |       this.resultOutdated = this.isResultOutdated();


warning: Argument 'old' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:39:23:
  37 |   },
  38 |   watch: {
> 39 |     windSpeed(newVal, old) {
     |                       ^
  40 |       console.log("wind speed changed");
  41 |       console.log(newVal);
  42 |       this.resultOutdated = this.isResultOutdated();


warning: 'old' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/Wind.vue:39:23:
  37 |   },
  38 |   watch: {
> 39 |     windSpeed(newVal, old) {
     |                       ^
  40 |       console.log("wind speed changed");
  41 |       console.log(newVal);
  42 |       this.resultOutdated = this.isResultOutdated();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:47:5:
  45 |       console.log("saved scen", this.currentScenario);
  46 |     },
> 47 |     windDirection(newVal, old) {
     |     ^
  48 |       console.log("wind direction changed");
  49 |       console.log(newVal);
  50 |       this.resultOutdated = this.isResultOutdated();


warning: Argument 'newVal' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:47:19:
  45 |       console.log("saved scen", this.currentScenario);
  46 |     },
> 47 |     windDirection(newVal, old) {
     |                   ^
  48 |       console.log("wind direction changed");
  49 |       console.log(newVal);
  50 |       this.resultOutdated = this.isResultOutdated();


warning: Argument 'old' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:47:27:
  45 |       console.log("saved scen", this.currentScenario);
  46 |     },
> 47 |     windDirection(newVal, old) {
     |                           ^
  48 |       console.log("wind direction changed");
  49 |       console.log(newVal);
  50 |       this.resultOutdated = this.isResultOutdated();


warning: 'old' is defined but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/Wind.vue:47:27:
  45 |       console.log("saved scen", this.currentScenario);
  46 |     },
> 47 |     windDirection(newVal, old) {
     |                           ^
  48 |       console.log("wind direction changed");
  49 |       console.log(newVal);
  50 |       this.resultOutdated = this.isResultOutdated();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:54:12:
  52 |     },
  53 |   },
> 54 |   mounted: function () {
     |            ^
  55 |     // hide all other layers
  56 |     this.$store.dispatch("hideAllLayersButThese", ["wind"]);
  57 |     /*autogenerationg Sub Menu for all divs of Class "division"*/


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:71:5:
  69 |   },
  70 |   methods: {
> 71 |     isResultOutdated() {
     |     ^
  72 |       return (
  73 |         this.windSpeed !== this.currentScenario["wind_speed"] ||
  74 |         this.windDirection !== this.currentScenario["wind_direction"]


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:79:5:
  77 |     // prop path is the path to the property inside the file that shall be updated. in this case the scenario description
  78 |     // for our scenario name "scenario_1"
> 79 |     confirmWindScenario() {
     |     ^
  80 |       const fileName = "wind_scenario";
  81 |       const propPath = ["scenario_1"];
  82 |       this.currentScenario = {


warning: 'fileName' is assigned a value but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/Wind.vue:80:13:
  78 |     // for our scenario name "scenario_1"
  79 |     confirmWindScenario() {
> 80 |       const fileName = "wind_scenario";
     |             ^
  81 |       const propPath = ["scenario_1"];
  82 |       this.currentScenario = {
  83 |         wind_speed: this.windSpeed,


warning: 'propPath' is assigned a value but never used (@typescript-eslint/no-unused-vars) at src/components/Scenario/Wind.vue:81:13:
  79 |     confirmWindScenario() {
  80 |       const fileName = "wind_scenario";
> 81 |       const propPath = ["scenario_1"];
     |             ^
  82 |       this.currentScenario = {
  83 |         wind_speed: this.windSpeed,
  84 |         wind_direction: this.windDirection,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:97:5:
   95 |       //this.$store.state.cityPyO.addLayerData(fileName, propPath, this.currentScenario).then(() => this.getWindResults())
   96 |     },
>  97 |     async getWindResults() {
      |     ^
   98 |       this.resultLoading = true;
   99 |       this.$store.dispatch("removeSourceFromMap", "wind", { root: true });
  100 |       this.$store.commit("scenario/windResultGeoJson", null);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:117:5:
  115 |         });
  116 |     },
> 117 |     loadSavedScenario(savedScenario) {
      |     ^
  118 |       this.windDirection = savedScenario["wind_direction"];
  119 |       this.windSpeed = savedScenario["wind_speed"];
  120 |       this.confirmWindScenario();


warning: Argument 'savedScenario' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:117:23:
  115 |         });
  116 |     },
> 117 |     loadSavedScenario(savedScenario) {
      |                       ^
  118 |       this.windDirection = savedScenario["wind_direction"];
  119 |       this.windSpeed = savedScenario["wind_speed"];
  120 |       this.confirmWindScenario();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:122:5:
  120 |       this.confirmWindScenario();
  121 |     },
> 122 |     saveWindScenario() {
      |     ^
  123 |       console.log("saved scenarios", this.savedWindScenarios);
  124 |       if (!this.scenarioAlreadySaved) {
  125 |         // add current scenario to saved scenarios


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/components/Scenario/Wind.vue:132:5:
  130 |       console.log(this.savedWindScenarios);
  131 |     },
> 132 |     isScenarioAlreadySaved() {
      |     ^
  133 |       const isSaved =
  134 |         this.savedWindScenarios.filter((savedScen) => {
  135 |           return (


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/config/layers.ts:44:8:
  42 | });
  43 | 
> 44 | export function getLayerOrder() {
     |        ^
  45 |   let layerOrder = [
  46 |     FocusAreasConfig.layer.id,
  47 |     SpacesConfig.layer.id,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/config/layers.ts:61:8:
  59 | }
  60 | 
> 61 | export function getAbmLayerIds() {
     |        ^
  62 |   let abmLayers = [];
  63 |   abmLayers = abmLayers.concat(buildingLayerIds);
  64 |   abmLayers = abmLayers.concat([


warning: 'CityPyODefaultUser' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/actions.ts:6:8:
  4 | import { ActionContext } from "vuex";
  5 | import { Layer } from "mapbox-gl";
> 6 | import CityPyODefaultUser from "@/config/cityPyoDefaultUser.json";
    |        ^
  7 | import FocusAreasLayer from "@/config/focusAreas.json";
  8 | import CircledFeatures from "@/config/circledFeatures.json";
  9 | import { getLayerOrder } from "@/config/layers.ts";


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:12:3:
  10 | 
  11 | export default {
> 12 |   async createDesignLayers({
     |   ^
  13 |     state,
  14 |     commit,
  15 |     dispatch,


error: Do not use "@ts-ignore" because it alters compilation errors (@typescript-eslint/ban-ts-comment) at src/store/actions.ts:22:5:
  20 |     const layerConfigs = Buildings.layers || [];
  21 |     sourceConfigs.push(Spaces.source);
> 22 |     // @ts-ignore
     |     ^
  23 |     layerConfigs.push(Spaces.layer);
  24 | 
  25 |     const loadLayers = new Promise((resolve) => {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:64:3:
  62 |     return;
  63 |   },
> 64 |   addSourceToMap(
     |   ^
  65 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
  66 |     source
  67 |   ) {


warning: 'commit' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/actions.ts:65:14:
  63 |   },
  64 |   addSourceToMap(
> 65 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
     |              ^
  66 |     source
  67 |   ) {
  68 |     if (state.map?.getSource(source.id)) {


warning: Argument 'source' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:66:5:
  64 |   addSourceToMap(
  65 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
> 66 |     source
     |     ^
  67 |   ) {
  68 |     if (state.map?.getSource(source.id)) {
  69 |       // remove all layers using this source and the source itself


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:76:3:
  74 |     return source;
  75 |   },
> 76 |   removeSourceFromMap(
     |   ^
  77 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
  78 |     sourceId
  79 |   ) {


warning: 'dispatch' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/actions.ts:77:22:
  75 |   },
  76 |   removeSourceFromMap(
> 77 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
     |                      ^
  78 |     sourceId
  79 |   ) {
  80 |     console.log("remove source from map", sourceId);


warning: Argument 'sourceId' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:78:5:
  76 |   removeSourceFromMap(
  77 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
> 78 |     sourceId
     |     ^
  79 |   ) {
  80 |     console.log("remove source from map", sourceId);
  81 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:96:3:
  94 |     }
  95 |   },
> 96 |   addLayerToMap(
     |   ^
  97 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
  98 |     layer
  99 |   ) {


warning: Argument 'layer' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:98:5:
   96 |   addLayerToMap(
   97 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
>  98 |     layer
      |     ^
   99 |   ) {
  100 |     if (state.map?.getLayer(layer.id)) {
  101 |       commit("removeLayerId", layer.id);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:110:3:
  108 |   },
  109 |   /** updates the layer order after a layer was added */
> 110 |   updateLayerOrder({ state, commit, dispatch }) {
      |   ^
  111 |     for (const layerName of getLayerOrder()) {
  112 |       if (state.map.getLayer(layerName)) {
  113 |         //console.log("putting layer on top ", layerName)


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:110:20:
  108 |   },
  109 |   /** updates the layer order after a layer was added */
> 110 |   updateLayerOrder({ state, commit, dispatch }) {
      |                    ^
  111 |     for (const layerName of getLayerOrder()) {
  112 |       if (state.map.getLayer(layerName)) {
  113 |         //console.log("putting layer on top ", layerName)


warning: 'commit' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/actions.ts:110:29:
  108 |   },
  109 |   /** updates the layer order after a layer was added */
> 110 |   updateLayerOrder({ state, commit, dispatch }) {
      |                             ^
  111 |     for (const layerName of getLayerOrder()) {
  112 |       if (state.map.getLayer(layerName)) {
  113 |         //console.log("putting layer on top ", layerName)


warning: 'dispatch' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/actions.ts:110:37:
  108 |   },
  109 |   /** updates the layer order after a layer was added */
> 110 |   updateLayerOrder({ state, commit, dispatch }) {
      |                                     ^
  111 |     for (const layerName of getLayerOrder()) {
  112 |       if (state.map.getLayer(layerName)) {
  113 |         //console.log("putting layer on top ", layerName)


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:118:3:
  116 |     }
  117 |   },
> 118 |   hideAllLayersButThese(
      |   ^
  119 |     { state, dispatch },
  120 |     layersToShow: string[] = [],
  121 |     hideDesignLayers = false


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:119:5:
  117 |   },
  118 |   hideAllLayersButThese(
> 119 |     { state, dispatch },
      |     ^
  120 |     layersToShow: string[] = [],
  121 |     hideDesignLayers = false
  122 |   ) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:141:3:
  139 |     }
  140 |   },
> 141 |   hideLayer({ state }, layerId: string) {
      |   ^
  142 |     if (state.map.getLayer(layerId)) {
  143 |       state.map.setLayoutProperty(layerId, "visibility", "none");
  144 |     }


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:141:13:
  139 |     }
  140 |   },
> 141 |   hideLayer({ state }, layerId: string) {
      |             ^
  142 |     if (state.map.getLayer(layerId)) {
  143 |       state.map.setLayoutProperty(layerId, "visibility", "none");
  144 |     }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:146:3:
  144 |     }
  145 |   },
> 146 |   showLayer({ state }, layerId: string) {
      |   ^
  147 |     if (state.map.getLayer(layerId)) {
  148 |       state.map.setLayoutProperty(layerId, "visibility", "visible");
  149 |     }


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:146:13:
  144 |     }
  145 |   },
> 146 |   showLayer({ state }, layerId: string) {
      |             ^
  147 |     if (state.map.getLayer(layerId)) {
  148 |       state.map.setLayoutProperty(layerId, "visibility", "visible");
  149 |     }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:151:3:
  149 |     }
  150 |   },
> 151 |   editFeatureProps({ state }, feature) {
      |   ^
  152 |     if (feature) {
  153 |       try {
  154 |         const sourceId = feature.layer.source;


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:151:20:
  149 |     }
  150 |   },
> 151 |   editFeatureProps({ state }, feature) {
      |                    ^
  152 |     if (feature) {
  153 |       try {
  154 |         const sourceId = feature.layer.source;


warning: Argument 'feature' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:151:31:
  149 |     }
  150 |   },
> 151 |   editFeatureProps({ state }, feature) {
      |                               ^
  152 |     if (feature) {
  153 |       try {
  154 |         const sourceId = feature.layer.source;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:171:3:
  169 |     }
  170 |   },
> 171 |   async connect(
      |   ^
  172 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
  173 |     options: ConnectionOptions
  174 |   ) {


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/actions.ts:172:7:
  170 |   },
  171 |   async connect(
> 172 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
      |       ^
  173 |     options: ConnectionOptions
  174 |   ) {
  175 |     const cityPyo = new CityPyO();


warning: 'dispatch' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/actions.ts:172:22:
  170 |   },
  171 |   async connect(
> 172 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
      |                      ^
  173 |     options: ConnectionOptions
  174 |   ) {
  175 |     const cityPyo = new CityPyO();


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:180:3:
  178 |     return await cityPyo.login(options.userdata);
  179 |   },
> 180 |   addFocusAreasMapLayer({
      |   ^
  181 |     state,
  182 |     commit,
  183 |     dispatch,


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/actions.ts:188:16:
  186 |       commit("focusAreasGeoJson", source.options.data);
  187 |       dispatch("addSourceToMap", source, { root: true })
> 188 |         .then((source) => {
      |                ^
  189 |           dispatch("addLayerToMap", FocusAreasLayer.layer, { root: true });
  190 |         })
  191 |         .then(() => {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:200:3:
  198 |     });
  199 |   },
> 200 |   updateCircledFeaturesLayer(
      |   ^
  201 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
  202 |     featureBuffer
  203 |   ) {


warning: Argument 'featureBuffer' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/actions.ts:202:5:
  200 |   updateCircledFeaturesLayer(
  201 |     { state, commit, dispatch }: ActionContext<StoreState, StoreState>,
> 202 |     featureBuffer
      |     ^
  203 |   ) {
  204 |     const featureCircles = state.featureCircles;
  205 | 


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/actions.ts:226:62:
  224 |     const source = CircledFeatures.mapSource;
  225 |     source.options.data.features = featureCircles;
> 226 |     dispatch("addSourceToMap", source, { root: true }).then((source) => {
      |                                                              ^
  227 |       dispatch("addLayerToMap", CircledFeatures.layer, { root: true });
  228 |     });
  229 |     commit("featureCircles", featureCircles);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:13:3:
  11 |   }
  12 | 
> 13 |   async login(userdata: { username: string; password: string }) {
     |   ^
  14 |     // log login request on cityPyo only if in production
  15 |     userdata["log_this_request"] = !(process.env.NODE_ENV === "development");
  16 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:36:3:
  34 |   }
  35 | 
> 36 |   async isUserRestricted() {
     |   ^
  37 |     const res = await fetch(this.url + "isRestrictedUser", {
  38 |       method: "POST",
  39 |       mode: "cors",


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:55:3:
  53 |   }
  54 | 
> 55 |   async performRequest(layerId, requestUrl, body) {
     |   ^
  56 |     const res = await fetch(requestUrl, {
  57 |       method: "POST",
  58 |       mode: "cors",


warning: Argument 'layerId' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:55:24:
  53 |   }
  54 | 
> 55 |   async performRequest(layerId, requestUrl, body) {
     |                        ^
  56 |     const res = await fetch(requestUrl, {
  57 |       method: "POST",
  58 |       mode: "cors",


warning: Argument 'requestUrl' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:55:33:
  53 |   }
  54 | 
> 55 |   async performRequest(layerId, requestUrl, body) {
     |                                 ^
  56 |     const res = await fetch(requestUrl, {
  57 |       method: "POST",
  58 |       mode: "cors",


warning: Argument 'body' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:55:45:
  53 |   }
  54 | 
> 55 |   async performRequest(layerId, requestUrl, body) {
     |                                             ^
  56 |     const res = await fetch(requestUrl, {
  57 |       method: "POST",
  58 |       mode: "cors",


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:77:3:
  75 |   }
  76 | 
> 77 |   async getLayer(id: string, formattedAsSource = true) {
     |   ^
  78 |     console.log("getting layer id from cityPyo", id);
  79 | 
  80 |     const requestUrl = this.url + "getLayer";


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:107:3:
  105 |    * @param payload | new value of the property to be updated
  106 |    */
> 107 |   async addLayerData(fileName: string, propPath: Array<string>, payload) {
      |   ^
  108 |     let requestUrl = this.url + "addLayerData/" + fileName;
  109 | 
  110 |     for (const prop of propPath) {


warning: Argument 'payload' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:107:65:
  105 |    * @param payload | new value of the property to be updated
  106 |    */
> 107 |   async addLayerData(fileName: string, propPath: Array<string>, payload) {
      |                                                                 ^
  108 |     let requestUrl = this.url + "addLayerData/" + fileName;
  109 | 
  110 |     for (const prop of propPath) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:121:3:
  119 |   }
  120 | 
> 121 |   async getAbmResultLayer(id: string, scenario: AbmScenario) {
      |   ^
  122 |     // fetch predefined workshop scenario layer
  123 |     if (workshopScenarioNames.includes(id)) {
  124 |       const responseJson = await this.getLayer(id, false);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:146:3:
  144 | 
  145 |   // the amenities layer is dependent on the chosen scenario
> 146 |   async getAbmAmenitiesLayer(id: string, scenario: AbmScenario) {
      |   ^
  147 |     // fetch predefined workshop scenario layer
  148 |     if (workshopScenarioNames.includes(id)) {
  149 |       const responseJson = await this.getLayer("amenities_" + id);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:173:3:
  171 |   }
  172 | 
> 173 |   async combineLayers(layer1, layer2) {
      |   ^
  174 |     const requestUrl = this.url + "combineLayers";
  175 | 
  176 |     const body = {


warning: Argument 'layer1' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:173:23:
  171 |   }
  172 | 
> 173 |   async combineLayers(layer1, layer2) {
      |                       ^
  174 |     const requestUrl = this.url + "combineLayers";
  175 | 
  176 |     const body = {


warning: Argument 'layer2' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:173:31:
  171 |   }
  172 | 
> 173 |   async combineLayers(layer1, layer2) {
      |                               ^
  174 |     const requestUrl = this.url + "combineLayers";
  175 | 
  176 |     const body = {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:191:3:
  189 |   }
  190 | 
> 191 |   getLayerData(query: string) {}
      |   ^
  192 | 
  193 |   updateLayerData(query: string) {}
  194 | 


warning: 'query' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/cityPyO.ts:191:16:
  189 |   }
  190 | 
> 191 |   getLayerData(query: string) {}
      |                ^
  192 | 
  193 |   updateLayerData(query: string) {}
  194 | 


error: Unexpected empty method 'getLayerData' (@typescript-eslint/no-empty-function) at src/store/cityPyO.ts:191:31:
  189 |   }
  190 | 
> 191 |   getLayerData(query: string) {}
      |                               ^
  192 | 
  193 |   updateLayerData(query: string) {}
  194 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:193:3:
  191 |   getLayerData(query: string) {}
  192 | 
> 193 |   updateLayerData(query: string) {}
      |   ^
  194 | 
  195 |   async formatResponse(id, responseJson) {
  196 |     return {


warning: 'query' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/cityPyO.ts:193:19:
  191 |   getLayerData(query: string) {}
  192 | 
> 193 |   updateLayerData(query: string) {}
      |                   ^
  194 | 
  195 |   async formatResponse(id, responseJson) {
  196 |     return {


error: Unexpected empty method 'updateLayerData' (@typescript-eslint/no-empty-function) at src/store/cityPyO.ts:193:34:
  191 |   getLayerData(query: string) {}
  192 | 
> 193 |   updateLayerData(query: string) {}
      |                                  ^
  194 | 
  195 |   async formatResponse(id, responseJson) {
  196 |     return {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:195:3:
  193 |   updateLayerData(query: string) {}
  194 | 
> 195 |   async formatResponse(id, responseJson) {
      |   ^
  196 |     return {
  197 |       id: id,
  198 |       options: {


warning: Argument 'id' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:195:24:
  193 |   updateLayerData(query: string) {}
  194 | 
> 195 |   async formatResponse(id, responseJson) {
      |                        ^
  196 |     return {
  197 |       id: id,
  198 |       options: {


warning: Argument 'responseJson' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/cityPyO.ts:195:28:
  193 |   updateLayerData(query: string) {}
  194 | 
> 195 |   async formatResponse(id, responseJson) {
      |                            ^
  196 |     return {
  197 |       id: id,
  198 |       options: {


error: Do not use "@ts-ignore" because it alters compilation errors (@typescript-eslint/ban-ts-comment) at src/store/deck-layers.ts:8:1:
   6 | import GL from "@luma.gl/constants";
   7 | import store from "../store/index";
>  8 | // @ts-ignore
     | ^
   9 | import { DataSet } from "@deck.gl/core/lib/layer";
  10 | import { mdiConsoleNetworkOutline } from "@mdi/js";
  11 | 


warning: 'mdiConsoleNetworkOutline' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/deck-layers.ts:10:10:
   8 | // @ts-ignore
   9 | import { DataSet } from "@deck.gl/core/lib/layer";
> 10 | import { mdiConsoleNetworkOutline } from "@mdi/js";
     |          ^
  11 | 
  12 | export const abmTripsLayerName = "abmTrips";
  13 | export const abmAggregationLayerName = "abmHeat";


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/deck-layers.ts:18:17:
  16 | 
  17 | export async function buildTripsLayer(
> 18 |   data: DataSet<any>,
     |                 ^
  19 |   currentTimeStamp: number
  20 | ): Promise<DeckLayer<any>> {
  21 |   //return new DeckLayer({


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/deck-layers.ts:20:22:
  18 |   data: DataSet<any>,
  19 |   currentTimeStamp: number
> 20 | ): Promise<DeckLayer<any>> {
     |                      ^
  21 |   //return new DeckLayer({
  22 |   const tripsLayer = new DeckLayer({
  23 |     id: abmTripsLayerName,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/deck-layers.ts:64:8:
  62 | }
  63 | 
> 64 | export async function buildArcLayer(arcLayerData) {
     |        ^
  65 |   return new DeckLayer({
  66 |     id: abmArcLayerName,
  67 |     type: ArcLayer,


warning: Argument 'arcLayerData' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/deck-layers.ts:64:37:
  62 | }
  63 | 
> 64 | export async function buildArcLayer(arcLayerData) {
     |                                     ^
  65 |   return new DeckLayer({
  66 |     id: abmArcLayerName,
  67 |     type: ArcLayer,


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/deck-layers.ts:81:17:
  79 | 
  80 | export async function buildAggregationLayer(
> 81 |   data: DataSet<any>,
     |                 ^
  82 |   type
  83 | ): Promise<DeckLayer<any>> {
  84 |   const aggregationLayer = new DeckLayer({


warning: Argument 'type' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/deck-layers.ts:82:3:
  80 | export async function buildAggregationLayer(
  81 |   data: DataSet<any>,
> 82 |   type
     |   ^
  83 | ): Promise<DeckLayer<any>> {
  84 |   const aggregationLayer = new DeckLayer({
  85 |     id: abmAggregationLayerName,


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/deck-layers.ts:83:22:
  81 |   data: DataSet<any>,
  82 |   type
> 83 | ): Promise<DeckLayer<any>> {
     |                      ^
  84 |   const aggregationLayer = new DeckLayer({
  85 |     id: abmAggregationLayerName,
  86 |     type: HeatmapLayer,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/deck-layers.ts:106:8:
  104 | 
  105 | //export function buildSWLayer(data: DataSet<any>) {
> 106 | export async function buildSWLayer(data: DataSet<any>, time) {
      |        ^
  107 |   data = data["features"];
  108 | 
  109 |   const stormWaterLayer = new DeckLayer({


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/deck-layers.ts:106:50:
  104 | 
  105 | //export function buildSWLayer(data: DataSet<any>) {
> 106 | export async function buildSWLayer(data: DataSet<any>, time) {
      |                                                  ^
  107 |   data = data["features"];
  108 | 
  109 |   const stormWaterLayer = new DeckLayer({


warning: Argument 'time' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/deck-layers.ts:106:56:
  104 | 
  105 | //export function buildSWLayer(data: DataSet<any>) {
> 106 | export async function buildSWLayer(data: DataSet<any>, time) {
      |                                                        ^
  107 |   data = data["features"];
  108 | 
  109 |   const stormWaterLayer = new DeckLayer({


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/deck-layers.ts:128:8:
  126 | }
  127 | 
> 128 | export function getPolygonColor(d) {
      |        ^
  129 |   if (d <= 0.2) {
  130 |     return [12, 45, 140];
  131 |   }


warning: Argument 'd' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/deck-layers.ts:128:33:
  126 | }
  127 | 
> 128 | export function getPolygonColor(d) {
      |                                 ^
  129 |   if (d <= 0.2) {
  130 |     return [12, 45, 140];
  131 |   }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/deck-layers.ts:168:8:
  166 | 
  167 | // animate deck trips layer
> 168 | export function animate(
      |        ^
  169 |   layer: DeckLayer<any>,
  170 |   start: number = null,
  171 |   end: number = null,


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/deck-layers.ts:169:20:
  167 | // animate deck trips layer
  168 | export function animate(
> 169 |   layer: DeckLayer<any>,
      |                    ^
  170 |   start: number = null,
  171 |   end: number = null,
  172 |   time: number = null


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/deck-layers.ts:222:23:
  220 | 
  221 |   // update current time on layer to move the dot
> 222 |   (layer as DeckLayer<any>).setProps({ currentTime: time });
      |                       ^
  223 | 
  224 |   // as long as endTime of trips layer is not reached - call next frame iteration
  225 |   if (time <= end && animationRunning) {


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/deck-layers.ts:234:33:
  232 | function getLayerStartTime(layer: DeckLayer) {
  233 |   return Math.min(
> 234 |     ...layer.props.data.map((d: any) =>
      |                                 ^
  235 |       Math.min(...layer.props.getTimestamps(d))
  236 |     )
  237 |   );


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/deck-layers.ts:242:33:
  240 | function getLayerEndTime(layer: DeckLayer) {
  241 |   return Math.max(
> 242 |     ...layer.props.data.map((d: any) =>
      |                                 ^
  243 |       Math.max(...layer.props.getTimestamps(d))
  244 |     )
  245 |   );


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/getters.ts:2:29:
  1 | export default {
> 2 |   layer: (s: StoreState) => (id: string) => s.map.getLayer(id),
    |                             ^
  3 |   source: (s: StoreState) => (id: string) => s.map.getSource(id),
  4 | };
  5 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/getters.ts:3:30:
  1 | export default {
  2 |   layer: (s: StoreState) => (id: string) => s.map.getLayer(id),
> 3 |   source: (s: StoreState) => (id: string) => s.map.getSource(id),
    |                              ^
  4 | };
  5 | 


error: Do not use "@ts-ignore" because it alters compilation errors (@typescript-eslint/ban-ts-comment) at src/store/index.ts:43:1:
  41 | });
  42 | 
> 43 | // @ts-ignore
     | ^
  44 | window.$store = store;
  45 | 
  46 | export default store;


warning: 'Layer' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/mutations.ts:1:10:
> 1 | import { Layer } from "mapbox-gl";
    |          ^
  2 | import { MapboxLayer as DeckLayer } from "@deck.gl/mapbox";
  3 | import Config from "@/config/config.json";
  4 | 


warning: 'DeckLayer' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/mutations.ts:2:25:
  1 | import { Layer } from "mapbox-gl";
> 2 | import { MapboxLayer as DeckLayer } from "@deck.gl/mapbox";
    |                         ^
  3 | import Config from "@/config/config.json";
  4 | 
  5 | export default {


warning: 'Config' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/mutations.ts:3:8:
  1 | import { Layer } from "mapbox-gl";
  2 | import { MapboxLayer as DeckLayer } from "@deck.gl/mapbox";
> 3 | import Config from "@/config/config.json";
    |        ^
  4 | 
  5 | export default {
  6 |   addLayerId(state: StoreState, id: string) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/mutations.ts:6:3:
  4 | 
  5 | export default {
> 6 |   addLayerId(state: StoreState, id: string) {
    |   ^
  7 |     if (!state.layerIds.includes(id)) {
  8 |       console.log("new layer added with id", id);
  9 |       state.layerIds.push(id);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/mutations.ts:14:3:
  12 |     }
  13 |   },
> 14 |   removeLayerId(state: StoreState, id: string) {
     |   ^
  15 |     state.layerIds = state.layerIds.filter((_id) => _id !== id);
  16 |   },
  17 | };


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/noise.ts:7:8:
   5 | export const noiseLayerName = "noise";
   6 | 
>  7 | export function getFormattedTrafficCounts(
     |        ^
   8 |   trafficCountsOriginalPlanning,
   9 |   trafficPercent
  10 | ) {


warning: Argument 'trafficCountsOriginalPlanning' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/noise.ts:8:3:
   6 | 
   7 | export function getFormattedTrafficCounts(
>  8 |   trafficCountsOriginalPlanning,
     |   ^
   9 |   trafficPercent
  10 | ) {
  11 |   const formattedTrafficCounts = trafficCountsOriginalPlanning;


warning: Argument 'trafficPercent' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/noise.ts:9:3:
   7 | export function getFormattedTrafficCounts(
   8 |   trafficCountsOriginalPlanning,
>  9 |   trafficPercent
     |   ^
  10 | ) {
  11 |   const formattedTrafficCounts = trafficCountsOriginalPlanning;
  12 |   formattedTrafficCounts.forEach((point) => {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/abmStats.ts:5:8:
  3 | import GrasbrookGeoJson from "@/assets/grasbrookArea.json";
  4 | 
> 5 | export async function calcAbmStatsForMultiLayer() {
    |        ^
  6 |   const multiLayerStats = store.state.scenario.abmStatsMultiLayer || {};
  7 | 
  8 |   const focusAreaIds = store.state.focusAreasGeoJson["features"].map((feat) => {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/abmStats.ts:57:8:
  55 |  * @param focusAreaId
  56 |  */
> 57 | export async function calculateAbmStatsForFocusArea(focusAreaId?: number) {
     |        ^
  58 |   if (!store.state.scenario.activeAbmSet) {
  59 |     console.log("cannot calc abmStats without abmData. No abmData in store.");
  60 |   }


error: Do not use "@ts-ignore" because it alters compilation errors (@typescript-eslint/ban-ts-comment) at src/store/scenario/abmStats.ts:292:3:
  290 | 
  291 |   // remove duplicates meetings
> 292 |   //@ts-ignore
      |   ^
  293 |   meetingsAtPoint = Array.from(
  294 |     new Set(meetingsAtPoint.map(JSON.stringify)),
  295 |     JSON.parse


error: Do not use "@ts-ignore" because it alters compilation errors (@typescript-eslint/ban-ts-comment) at src/store/scenario/abmStats.ts:398:1:
  396 |   };
  397 | }
> 398 | //@ts-ignore
      | ^
  399 | 


warning: 'getPolygonColor' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:11:3:
   9 |   abmTripsLayerName,
  10 |   animate,
> 11 |   getPolygonColor,
     |   ^
  12 |   buildTripsLayer,
  13 |   abmAggregationLayerName,
  14 |   buildAggregationLayer,


warning: 'getFormattedTrafficCounts' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:21:10:
  19 | } from "@/store/deck-layers";
  20 | import { bridges as bridgeNames, bridgeVeddelOptions } from "@/store/abm";
> 21 | import { getFormattedTrafficCounts, noiseLayerName } from "@/store/noise";
     |          ^
  22 | import { mdiConsoleNetwork, mdiControllerClassicOutline } from "@mdi/js";
  23 | import { VCarouselReverseTransition } from "vuetify/lib";
  24 | 


warning: 'noiseLayerName' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:21:37:
  19 | } from "@/store/deck-layers";
  20 | import { bridges as bridgeNames, bridgeVeddelOptions } from "@/store/abm";
> 21 | import { getFormattedTrafficCounts, noiseLayerName } from "@/store/noise";
     |                                     ^
  22 | import { mdiConsoleNetwork, mdiControllerClassicOutline } from "@mdi/js";
  23 | import { VCarouselReverseTransition } from "vuetify/lib";
  24 | 


warning: 'mdiConsoleNetwork' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:22:10:
  20 | import { bridges as bridgeNames, bridgeVeddelOptions } from "@/store/abm";
  21 | import { getFormattedTrafficCounts, noiseLayerName } from "@/store/noise";
> 22 | import { mdiConsoleNetwork, mdiControllerClassicOutline } from "@mdi/js";
     |          ^
  23 | import { VCarouselReverseTransition } from "vuetify/lib";
  24 | 
  25 | import {


warning: 'mdiControllerClassicOutline' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:22:29:
  20 | import { bridges as bridgeNames, bridgeVeddelOptions } from "@/store/abm";
  21 | import { getFormattedTrafficCounts, noiseLayerName } from "@/store/noise";
> 22 | import { mdiConsoleNetwork, mdiControllerClassicOutline } from "@mdi/js";
     |                             ^
  23 | import { VCarouselReverseTransition } from "vuetify/lib";
  24 | 
  25 | import {


warning: 'VCarouselReverseTransition' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:23:10:
  21 | import { getFormattedTrafficCounts, noiseLayerName } from "@/store/noise";
  22 | import { mdiConsoleNetwork, mdiControllerClassicOutline } from "@mdi/js";
> 23 | import { VCarouselReverseTransition } from "vuetify/lib";
     |          ^
  24 | 
  25 | import {
  26 |   calcAbmStatsForMultiLayer,


warning: 'FocusAreasLayer' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:41:8:
  39 |   getSimulationResultForScenario,
  40 | } from "@/store/scenario/calculationModules";
> 41 | import FocusAreasLayer from "@/config/focusAreas.json";
     |        ^
  42 | import vue from "vue";
  43 | 
  44 | export default {


warning: 'vue' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:42:8:
  40 | } from "@/store/scenario/calculationModules";
  41 | import FocusAreasLayer from "@/config/focusAreas.json";
> 42 | import vue from "vue";
     |        ^
  43 | 
  44 | export default {
  45 |   async updateNoiseScenario(


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:45:3:
  43 | 
  44 | export default {
> 45 |   async updateNoiseScenario(
     |   ^
  46 |     { state, commit, dispatch, rootState },
  47 |     noiseScenario
  48 |   ) {


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:46:5:
  44 | export default {
  45 |   async updateNoiseScenario(
> 46 |     { state, commit, dispatch, rootState },
     |     ^
  47 |     noiseScenario
  48 |   ) {
  49 |     noiseScenario["city_pyo_user"] = rootState.cityPyO.userid;


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:46:7:
  44 | export default {
  45 |   async updateNoiseScenario(
> 46 |     { state, commit, dispatch, rootState },
     |       ^
  47 |     noiseScenario
  48 |   ) {
  49 |     noiseScenario["city_pyo_user"] = rootState.cityPyO.userid;


warning: Argument 'noiseScenario' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:47:5:
  45 |   async updateNoiseScenario(
  46 |     { state, commit, dispatch, rootState },
> 47 |     noiseScenario
     |     ^
  48 |   ) {
  49 |     noiseScenario["city_pyo_user"] = rootState.cityPyO.userid;
  50 | 


warning: 'noiseResultSource' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:64:12:
  62 |         // adding result to map
  63 |         dispatch("addSourceToMap", noiseResult.source, { root: true }).then(
> 64 |           (noiseResultSource) => {
     |            ^
  65 |             dispatch("addLayerToMap", NoiseLayer.layer, { root: true });
  66 |             dispatch("addTrafficCountLayer");
  67 |           }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:71:3:
  69 |       });
  70 |   },
> 71 |   async addTrafficCountLayer({ state, commit, dispatch, rootState }) {
     |   ^
  72 |     // check if traffic counts already in store, otherwise load them from cityPyo
  73 |     const scenarioTraffic =
  74 |       JSON.parse(JSON.stringify(state.trafficCounts)) ||


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:71:30:
  69 |       });
  70 |   },
> 71 |   async addTrafficCountLayer({ state, commit, dispatch, rootState }) {
     |                              ^
  72 |     // check if traffic counts already in store, otherwise load them from cityPyo
  73 |     const scenarioTraffic =
  74 |       JSON.parse(JSON.stringify(state.trafficCounts)) ||


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:103:69:
  101 |       },
  102 |     };
> 103 |     return dispatch("addSourceToMap", source, { root: true }).then((source) => {
      |                                                                     ^
  104 |       return dispatch("addLayerToMap", TrafficCountLayer.layer, { root: true });
  105 |     });
  106 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:107:3:
  105 |     });
  106 |   },
> 107 |   async updateStormWaterLayer(
      |   ^
  108 |     { state, commit, dispatch, rootState },
  109 |     stormWaterScenario
  110 |   ) {


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:108:5:
  106 |   },
  107 |   async updateStormWaterLayer(
> 108 |     { state, commit, dispatch, rootState },
      |     ^
  109 |     stormWaterScenario
  110 |   ) {
  111 |     stormWaterScenario["city_pyo_user"] = rootState.cityPyO.userid;


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:108:7:
  106 |   },
  107 |   async updateStormWaterLayer(
> 108 |     { state, commit, dispatch, rootState },
      |       ^
  109 |     stormWaterScenario
  110 |   ) {
  111 |     stormWaterScenario["city_pyo_user"] = rootState.cityPyO.userid;


warning: Argument 'stormWaterScenario' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:109:5:
  107 |   async updateStormWaterLayer(
  108 |     { state, commit, dispatch, rootState },
> 109 |     stormWaterScenario
      |     ^
  110 |   ) {
  111 |     stormWaterScenario["city_pyo_user"] = rootState.cityPyO.userid;
  112 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:142:3:
  140 |     });
  141 |   },
> 142 |   addSunExposureLayer({
      |   ^
  143 |     state,
  144 |     rootState,
  145 |     commit,


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:143:5:
  141 |   },
  142 |   addSunExposureLayer({
> 143 |     state,
      |     ^
  144 |     rootState,
  145 |     commit,
  146 |     dispatch,


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:151:10:
  149 |       commit("sunExposureGeoJson", source.options.data);
  150 |       return dispatch("addSourceToMap", source, { root: true }).then(
> 151 |         (source) => {
      |          ^
  152 |           return dispatch("addLayerToMap", SunExposure.layer, { root: true });
  153 |         }
  154 |       );


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:159:3:
  157 |   // load layer source from cityPyo and add the layer to the map
  158 |   // Todo : isnt there a way to update the source data without reinstanciating the entire layer?
> 159 |   async updateWindLayer({ state, commit, dispatch, rootState }, wind_scenario) {
      |   ^
  160 |     console.log("updating wind!");
  161 |     wind_scenario["city_pyo_user"] = rootState.cityPyO.userid;
  162 | 


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:159:25:
  157 |   // load layer source from cityPyo and add the layer to the map
  158 |   // Todo : isnt there a way to update the source data without reinstanciating the entire layer?
> 159 |   async updateWindLayer({ state, commit, dispatch, rootState }, wind_scenario) {
      |                         ^
  160 |     console.log("updating wind!");
  161 |     wind_scenario["city_pyo_user"] = rootState.cityPyO.userid;
  162 | 


warning: Argument 'wind_scenario' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:159:65:
  157 |   // load layer source from cityPyo and add the layer to the map
  158 |   // Todo : isnt there a way to update the source data without reinstanciating the entire layer?
> 159 |   async updateWindLayer({ state, commit, dispatch, rootState }, wind_scenario) {
      |                                                                 ^
  160 |     console.log("updating wind!");
  161 |     wind_scenario["city_pyo_user"] = rootState.cityPyO.userid;
  162 | 


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:191:66:
  189 |         source.id = "wind";
  190 |         commit("windResultGeoJson", Object.freeze(source.options.data));
> 191 |         dispatch("addSourceToMap", source, { root: true }).then((source) => {
      |                                                                  ^
  192 |           dispatch("addLayerToMap", WindResult.layer, { root: true });
  193 |         });
  194 |       }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:205:3:
  203 |   },
  204 |   // TODO: adapt to new abm model with underpass_veddel_north and new results!
> 205 |   loadWorkshopScenario({ state, commit, dispatch, rootState }, scenarioId) {
      |   ^
  206 |     const bridges = updateBridges(
  207 |       bridgeNames.bridge_hafencity,
  208 |       bridgeVeddelOptions.diagonal


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:205:24:
  203 |   },
  204 |   // TODO: adapt to new abm model with underpass_veddel_north and new results!
> 205 |   loadWorkshopScenario({ state, commit, dispatch, rootState }, scenarioId) {
      |                        ^
  206 |     const bridges = updateBridges(
  207 |       bridgeNames.bridge_hafencity,
  208 |       bridgeVeddelOptions.diagonal


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:205:26:
  203 |   },
  204 |   // TODO: adapt to new abm model with underpass_veddel_north and new results!
> 205 |   loadWorkshopScenario({ state, commit, dispatch, rootState }, scenarioId) {
      |                          ^
  206 |     const bridges = updateBridges(
  207 |       bridgeNames.bridge_hafencity,
  208 |       bridgeVeddelOptions.diagonal


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:205:51:
  203 |   },
  204 |   // TODO: adapt to new abm model with underpass_veddel_north and new results!
> 205 |   loadWorkshopScenario({ state, commit, dispatch, rootState }, scenarioId) {
      |                                                   ^
  206 |     const bridges = updateBridges(
  207 |       bridgeNames.bridge_hafencity,
  208 |       bridgeVeddelOptions.diagonal


warning: Argument 'scenarioId' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:205:64:
  203 |   },
  204 |   // TODO: adapt to new abm model with underpass_veddel_north and new results!
> 205 |   loadWorkshopScenario({ state, commit, dispatch, rootState }, scenarioId) {
      |                                                                ^
  206 |     const bridges = updateBridges(
  207 |       bridgeNames.bridge_hafencity,
  208 |       bridgeVeddelOptions.diagonal


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:216:3:
  214 |     dispatch("updateAmenitiesLayer", scenarioId);
  215 |   },
> 216 |   updateAbmDesignScenario({ state, commit, dispatch, rootState }) {
      |   ^
  217 |     /*    // reset all abm data
  218 |     commit("abmData", null)
  219 |     commit("abmTrips", null)


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:216:27:
  214 |     dispatch("updateAmenitiesLayer", scenarioId);
  215 |   },
> 216 |   updateAbmDesignScenario({ state, commit, dispatch, rootState }) {
      |                           ^
  217 |     /*    // reset all abm data
  218 |     commit("abmData", null)
  219 |     commit("abmTrips", null)


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:216:54:
  214 |     dispatch("updateAmenitiesLayer", scenarioId);
  215 |   },
> 216 |   updateAbmDesignScenario({ state, commit, dispatch, rootState }) {
      |                                                      ^
  217 |     /*    // reset all abm data
  218 |     commit("abmData", null)
  219 |     commit("abmTrips", null)


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:252:3:
  250 |     return dispatch("initialAbmComputing");
  251 |   },
> 252 |   calculateStatsForGrasbrook({ state, commit, dispatch, rootState }) {
      |   ^
  253 |     calculateAmenityStatsForFocusArea();
  254 |     calculateAbmStatsForFocusArea();
  255 |   },


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:252:30:
  250 |     return dispatch("initialAbmComputing");
  251 |   },
> 252 |   calculateStatsForGrasbrook({ state, commit, dispatch, rootState }) {
      |                              ^
  253 |     calculateAmenityStatsForFocusArea();
  254 |     calculateAbmStatsForFocusArea();
  255 |   },


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:252:32:
  250 |     return dispatch("initialAbmComputing");
  251 |   },
> 252 |   calculateStatsForGrasbrook({ state, commit, dispatch, rootState }) {
      |                                ^
  253 |     calculateAmenityStatsForFocusArea();
  254 |     calculateAbmStatsForFocusArea();
  255 |   },


warning: 'commit' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:252:39:
  250 |     return dispatch("initialAbmComputing");
  251 |   },
> 252 |   calculateStatsForGrasbrook({ state, commit, dispatch, rootState }) {
      |                                       ^
  253 |     calculateAmenityStatsForFocusArea();
  254 |     calculateAbmStatsForFocusArea();
  255 |   },


warning: 'dispatch' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:252:47:
  250 |     return dispatch("initialAbmComputing");
  251 |   },
> 252 |   calculateStatsForGrasbrook({ state, commit, dispatch, rootState }) {
      |                                               ^
  253 |     calculateAmenityStatsForFocusArea();
  254 |     calculateAbmStatsForFocusArea();
  255 |   },


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:252:57:
  250 |     return dispatch("initialAbmComputing");
  251 |   },
> 252 |   calculateStatsForGrasbrook({ state, commit, dispatch, rootState }) {
      |                                                         ^
  253 |     calculateAmenityStatsForFocusArea();
  254 |     calculateAbmStatsForFocusArea();
  255 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:256:3:
  254 |     calculateAbmStatsForFocusArea();
  255 |   },
> 256 |   showLoadingScreen(
      |   ^
  257 |     { state, commit, dispatch, rootState },
  258 |     message = "loading"
  259 |   ) {


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:257:5:
  255 |   },
  256 |   showLoadingScreen(
> 257 |     { state, commit, dispatch, rootState },
      |     ^
  258 |     message = "loading"
  259 |   ) {
  260 |     // TODO: is this still needed?


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:257:7:
  255 |   },
  256 |   showLoadingScreen(
> 257 |     { state, commit, dispatch, rootState },
      |       ^
  258 |     message = "loading"
  259 |   ) {
  260 |     // TODO: is this still needed?


warning: 'commit' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:257:14:
  255 |   },
  256 |   showLoadingScreen(
> 257 |     { state, commit, dispatch, rootState },
      |              ^
  258 |     message = "loading"
  259 |   ) {
  260 |     // TODO: is this still needed?


warning: 'dispatch' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:257:22:
  255 |   },
  256 |   showLoadingScreen(
> 257 |     { state, commit, dispatch, rootState },
      |                      ^
  258 |     message = "loading"
  259 |   ) {
  260 |     // TODO: is this still needed?


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:257:32:
  255 |   },
  256 |   showLoadingScreen(
> 257 |     { state, commit, dispatch, rootState },
      |                                ^
  258 |     message = "loading"
  259 |   ) {
  260 |     // TODO: is this still needed?


warning: 'message' is assigned a value but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:258:5:
  256 |   showLoadingScreen(
  257 |     { state, commit, dispatch, rootState },
> 258 |     message = "loading"
      |     ^
  259 |   ) {
  260 |     // TODO: is this still needed?
  261 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:262:3:
  260 |     // TODO: is this still needed?
  261 |   },
> 262 |   async calculateStatsForMultiLayerAnalysis({
      |   ^
  263 |     state,
  264 |     commit,
  265 |     dispatch,


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:262:45:
  260 |     // TODO: is this still needed?
  261 |   },
> 262 |   async calculateStatsForMultiLayerAnalysis({
      |                                             ^
  263 |     state,
  264 |     commit,
  265 |     dispatch,


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:263:5:
  261 |   },
  262 |   async calculateStatsForMultiLayerAnalysis({
> 263 |     state,
      |     ^
  264 |     commit,
  265 |     dispatch,
  266 |     rootState,


warning: 'dispatch' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:265:5:
  263 |     state,
  264 |     commit,
> 265 |     dispatch,
      |     ^
  266 |     rootState,
  267 |   }) {
  268 |     commit("resultLoading", true);


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:266:5:
  264 |     commit,
  265 |     dispatch,
> 266 |     rootState,
      |     ^
  267 |   }) {
  268 |     commit("resultLoading", true);
  269 |     commit("loader", true);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:284:3:
  282 |   },
  283 |   // load layer source from cityPyo and add the layer to the map
> 284 |   updateAmenitiesLayer({ state, commit, dispatch, rootState }, workshopId) {
      |   ^
  285 |     // load new data from cityPyo
  286 |     const amenitiesLayerName = workshopId || Amenities.mapSource.data.id;
  287 | 


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:284:24:
  282 |   },
  283 |   // load layer source from cityPyo and add the layer to the map
> 284 |   updateAmenitiesLayer({ state, commit, dispatch, rootState }, workshopId) {
      |                        ^
  285 |     // load new data from cityPyo
  286 |     const amenitiesLayerName = workshopId || Amenities.mapSource.data.id;
  287 | 


warning: Argument 'workshopId' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:284:64:
  282 |   },
  283 |   // load layer source from cityPyo and add the layer to the map
> 284 |   updateAmenitiesLayer({ state, commit, dispatch, rootState }, workshopId) {
      |                                                                ^
  285 |     // load new data from cityPyo
  286 |     const amenitiesLayerName = workshopId || Amenities.mapSource.data.id;
  287 | 


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:294:12:
  292 |         commit("amenitiesGeoJson", Object.freeze(source.options.data));
  293 |         return dispatch("addSourceToMap", source, { root: true }).then(
> 294 |           (source) => {
      |            ^
  295 |             return dispatch("addLayerToMap", Amenities.layer, { root: true });
  296 |           }
  297 |         );


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:301:3:
  299 |   },
  300 |   // load layer source from cityPyo and add the layer to the map
> 301 |   updateBridgeLayer({ state, commit, dispatch, rootState }, payload) {
      |   ^
  302 |     // delete any bridge layer that is still on the map, before adding a new one
  303 | 
  304 |     // TODO this part can be deleted?? is already moved when calling "addSourceToMap"


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:301:21:
  299 |   },
  300 |   // load layer source from cityPyo and add the layer to the map
> 301 |   updateBridgeLayer({ state, commit, dispatch, rootState }, payload) {
      |                     ^
  302 |     // delete any bridge layer that is still on the map, before adding a new one
  303 | 
  304 |     // TODO this part can be deleted?? is already moved when calling "addSourceToMap"


warning: 'commit' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:301:30:
  299 |   },
  300 |   // load layer source from cityPyo and add the layer to the map
> 301 |   updateBridgeLayer({ state, commit, dispatch, rootState }, payload) {
      |                              ^
  302 |     // delete any bridge layer that is still on the map, before adding a new one
  303 | 
  304 |     // TODO this part can be deleted?? is already moved when calling "addSourceToMap"


warning: Argument 'payload' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:301:61:
  299 |   },
  300 |   // load layer source from cityPyo and add the layer to the map
> 301 |   updateBridgeLayer({ state, commit, dispatch, rootState }, payload) {
      |                                                             ^
  302 |     // delete any bridge layer that is still on the map, before adding a new one
  303 | 
  304 |     // TODO this part can be deleted?? is already moved when calling "addSourceToMap"


warning: 'payload' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:301:61:
  299 |   },
  300 |   // load layer source from cityPyo and add the layer to the map
> 301 |   updateBridgeLayer({ state, commit, dispatch, rootState }, payload) {
      |                                                             ^
  302 |     // delete any bridge layer that is still on the map, before adding a new one
  303 | 
  304 |     // TODO this part can be deleted?? is already moved when calling "addSourceToMap"


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:320:66:
  318 |       const mapSource = Bridges.mapSource;
  319 |       rootState.cityPyO.getLayer(mapSource.data.id).then((source) => {
> 320 |         dispatch("addSourceToMap", source, { root: true }).then((source) => {
      |                                                                  ^
  321 |           layers.forEach((layer) => {
  322 |             dispatch("addLayerToMap", layer, { root: true });
  323 |           });


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:328:3:
  326 |     }
  327 |   },
> 328 |   addMultiLayerAnalysisLayer({ state, commit, dispatch, rootState }, features) {
      |   ^
  329 |     // update layer on map
  330 |     const source = MultiLayerAnalysisConfig.mapSource;
  331 |     source.options.data.features = features;


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:328:30:
  326 |     }
  327 |   },
> 328 |   addMultiLayerAnalysisLayer({ state, commit, dispatch, rootState }, features) {
      |                              ^
  329 |     // update layer on map
  330 |     const source = MultiLayerAnalysisConfig.mapSource;
  331 |     source.options.data.features = features;


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:328:32:
  326 |     }
  327 |   },
> 328 |   addMultiLayerAnalysisLayer({ state, commit, dispatch, rootState }, features) {
      |                                ^
  329 |     // update layer on map
  330 |     const source = MultiLayerAnalysisConfig.mapSource;
  331 |     source.options.data.features = features;


warning: 'commit' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:328:39:
  326 |     }
  327 |   },
> 328 |   addMultiLayerAnalysisLayer({ state, commit, dispatch, rootState }, features) {
      |                                       ^
  329 |     // update layer on map
  330 |     const source = MultiLayerAnalysisConfig.mapSource;
  331 |     source.options.data.features = features;


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:328:57:
  326 |     }
  327 |   },
> 328 |   addMultiLayerAnalysisLayer({ state, commit, dispatch, rootState }, features) {
      |                                                         ^
  329 |     // update layer on map
  330 |     const source = MultiLayerAnalysisConfig.mapSource;
  331 |     source.options.data.features = features;


warning: Argument 'features' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:328:70:
  326 |     }
  327 |   },
> 328 |   addMultiLayerAnalysisLayer({ state, commit, dispatch, rootState }, features) {
      |                                                                      ^
  329 |     // update layer on map
  330 |     const source = MultiLayerAnalysisConfig.mapSource;
  331 |     source.options.data.features = features;


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:332:69:
  330 |     const source = MultiLayerAnalysisConfig.mapSource;
  331 |     source.options.data.features = features;
> 332 |     return dispatch("addSourceToMap", source, { root: true }).then((source) => {
      |                                                                     ^
  333 |       return dispatch("addLayerToMap", MultiLayerAnalysisConfig.layer, {
  334 |         root: true,
  335 |       });


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:338:3:
  336 |     });
  337 |   },
> 338 |   addSubSelectionLayer({ state, commit, dispatch, rootState }, features) {
      |   ^
  339 |     // update layer on map
  340 |     const source = SubSelectionLayerConfig.mapSource;
  341 |     source.options.data.features = features;


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:338:24:
  336 |     });
  337 |   },
> 338 |   addSubSelectionLayer({ state, commit, dispatch, rootState }, features) {
      |                        ^
  339 |     // update layer on map
  340 |     const source = SubSelectionLayerConfig.mapSource;
  341 |     source.options.data.features = features;


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:338:26:
  336 |     });
  337 |   },
> 338 |   addSubSelectionLayer({ state, commit, dispatch, rootState }, features) {
      |                          ^
  339 |     // update layer on map
  340 |     const source = SubSelectionLayerConfig.mapSource;
  341 |     source.options.data.features = features;


warning: 'commit' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:338:33:
  336 |     });
  337 |   },
> 338 |   addSubSelectionLayer({ state, commit, dispatch, rootState }, features) {
      |                                 ^
  339 |     // update layer on map
  340 |     const source = SubSelectionLayerConfig.mapSource;
  341 |     source.options.data.features = features;


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:338:51:
  336 |     });
  337 |   },
> 338 |   addSubSelectionLayer({ state, commit, dispatch, rootState }, features) {
      |                                                   ^
  339 |     // update layer on map
  340 |     const source = SubSelectionLayerConfig.mapSource;
  341 |     source.options.data.features = features;


warning: Argument 'features' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:338:64:
  336 |     });
  337 |   },
> 338 |   addSubSelectionLayer({ state, commit, dispatch, rootState }, features) {
      |                                                                ^
  339 |     // update layer on map
  340 |     const source = SubSelectionLayerConfig.mapSource;
  341 |     source.options.data.features = features;


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:342:62:
  340 |     const source = SubSelectionLayerConfig.mapSource;
  341 |     source.options.data.features = features;
> 342 |     dispatch("addSourceToMap", source, { root: true }).then((source) => {
      |                                                              ^
  343 |       dispatch("addLayerToMap", SubSelectionLayerConfig.layer, { root: true });
  344 |     });
  345 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:346:3:
  344 |     });
  345 |   },
> 346 |   addMultiLayerPerformanceInfos(
      |   ^
  347 |     { state, commit, dispatch, rootState },
  348 |     features
  349 |   ) {


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:347:5:
  345 |   },
  346 |   addMultiLayerPerformanceInfos(
> 347 |     { state, commit, dispatch, rootState },
      |     ^
  348 |     features
  349 |   ) {
  350 |     // update layer on map


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:347:7:
  345 |   },
  346 |   addMultiLayerPerformanceInfos(
> 347 |     { state, commit, dispatch, rootState },
      |       ^
  348 |     features
  349 |   ) {
  350 |     // update layer on map


warning: 'commit' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:347:14:
  345 |   },
  346 |   addMultiLayerPerformanceInfos(
> 347 |     { state, commit, dispatch, rootState },
      |              ^
  348 |     features
  349 |   ) {
  350 |     // update layer on map


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:347:32:
  345 |   },
  346 |   addMultiLayerPerformanceInfos(
> 347 |     { state, commit, dispatch, rootState },
      |                                ^
  348 |     features
  349 |   ) {
  350 |     // update layer on map


warning: Argument 'features' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:348:5:
  346 |   addMultiLayerPerformanceInfos(
  347 |     { state, commit, dispatch, rootState },
> 348 |     features
      |     ^
  349 |   ) {
  350 |     // update layer on map
  351 |     const source = PerformanceInfosConfig.mapSource;


warning: 'source' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:353:62:
  351 |     const source = PerformanceInfosConfig.mapSource;
  352 |     source.options.data.features = features;
> 353 |     dispatch("addSourceToMap", source, { root: true }).then((source) => {
      |                                                              ^
  354 |       dispatch("addLayerToMap", PerformanceInfosConfig.layer, { root: true });
  355 |     });
  356 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:358:3:
  356 |   },
  357 |   //LOADING INITIAL ABM DATA
> 358 |   initialAbmComputing(
      |   ^
  359 |     { state, commit, dispatch, rootState },
  360 |     workshopScenario
  361 |   ) {


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:359:5:
  357 |   //LOADING INITIAL ABM DATA
  358 |   initialAbmComputing(
> 359 |     { state, commit, dispatch, rootState },
      |     ^
  360 |     workshopScenario
  361 |   ) {
  362 |     //show loading screen


warning: Argument 'workshopScenario' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:360:5:
  358 |   initialAbmComputing(
  359 |     { state, commit, dispatch, rootState },
> 360 |     workshopScenario
      |     ^
  361 |   ) {
  362 |     //show loading screen
  363 |     commit("resultLoading", true);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:391:3:
  389 |   },
  390 |   //compute ABM Data Set
> 391 |   computeLoop({ state, commit, dispatch, rootState }, abmCore) {
      |   ^
  392 |     const agentIndexes = {};
  393 |     const abmFilterData = {};
  394 |     const timePaths = [];


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:391:15:
  389 |   },
  390 |   //compute ABM Data Set
> 391 |   computeLoop({ state, commit, dispatch, rootState }, abmCore) {
      |               ^
  392 |     const agentIndexes = {};
  393 |     const abmFilterData = {};
  394 |     const timePaths = [];


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:391:17:
  389 |   },
  390 |   //compute ABM Data Set
> 391 |   computeLoop({ state, commit, dispatch, rootState }, abmCore) {
      |                 ^
  392 |     const agentIndexes = {};
  393 |     const abmFilterData = {};
  394 |     const timePaths = [];


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:391:42:
  389 |   },
  390 |   //compute ABM Data Set
> 391 |   computeLoop({ state, commit, dispatch, rootState }, abmCore) {
      |                                          ^
  392 |     const agentIndexes = {};
  393 |     const abmFilterData = {};
  394 |     const timePaths = [];


warning: Argument 'abmCore' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:391:55:
  389 |   },
  390 |   //compute ABM Data Set
> 391 |   computeLoop({ state, commit, dispatch, rootState }, abmCore) {
      |                                                       ^
  392 |     const agentIndexes = {};
  393 |     const abmFilterData = {};
  394 |     const timePaths = [];


warning: 'array' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:402:34:
  400 | 
  401 |     commit("loaderTxt", "Clustering ABM Data for functional purposes ... ");
> 402 |     abmCore.forEach((who, index, array) => {
      |                                  ^
  403 |       const agent_id = who.agent.id;
  404 | 
  405 |       // #0 create a simple lookup with all agent id's and their index in the abmCore


warning: 'a' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:434:37:
  432 | 
  433 |       commit("loaderTxt", "Analyzing Time Data ... ");
> 434 |       who.timestamps.forEach((v, i, a) => {
      |                                     ^
  435 |         /*round timestamps to full hours*/
  436 |         const h = Math.floor(v / 3600) + 8;
  437 |         /*create object keys from full hours*/


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:510:3:
  508 |     );
  509 |   },
> 510 |   buildLayers({ state, commit, dispatch, rootState }) {
      |   ^
  511 |     const tripsLayerData = state.activeAbmSet;
  512 |     const heatLayerData = state.activeTimePaths;
  513 |     const currentTimeStamp = 0;


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:510:15:
  508 |     );
  509 |   },
> 510 |   buildLayers({ state, commit, dispatch, rootState }) {
      |               ^
  511 |     const tripsLayerData = state.activeAbmSet;
  512 |     const heatLayerData = state.activeTimePaths;
  513 |     const currentTimeStamp = 0;


warning: 'value' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:532:50:
  530 | 
  531 |     //preparing Data for HeatMap Layer
> 532 |     Object.entries(heatLayerData).forEach(([key, value]) => {
      |                                                  ^
  533 |       Object.entries(heatLayerData[key].values).forEach(
  534 |         ([subKey, subValue]) => {
  535 |           const coordinate = {


warning: 'subValue' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:534:19:
  532 |     Object.entries(heatLayerData).forEach(([key, value]) => {
  533 |       Object.entries(heatLayerData[key].values).forEach(
> 534 |         ([subKey, subValue]) => {
      |                   ^
  535 |           const coordinate = {
  536 |             c: subKey.split(",").map(Number),
  537 |             w: heatLayerData[key].values[subKey].length,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:559:3:
  557 |     );
  558 |   },
> 559 |   updateLayers({ state, commit, dispatch, rootState }, layer) {
      |   ^
  560 |     const range = state.selectedRange;
  561 |     const type = state.heatMapType;
  562 |     const tripsLayerData = state.activeAbmSet;


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:559:16:
  557 |     );
  558 |   },
> 559 |   updateLayers({ state, commit, dispatch, rootState }, layer) {
      |                ^
  560 |     const range = state.selectedRange;
  561 |     const type = state.heatMapType;
  562 |     const tripsLayerData = state.activeAbmSet;


warning: Argument 'layer' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:559:56:
  557 |     );
  558 |   },
> 559 |   updateLayers({ state, commit, dispatch, rootState }, layer) {
      |                                                        ^
  560 |     const range = state.selectedRange;
  561 |     const type = state.heatMapType;
  562 |     const tripsLayerData = state.activeAbmSet;


warning: 'value' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:586:52:
  584 | 
  585 |     if (layer == "heatMap" || layer == "all") {
> 586 |       Object.entries(heatLayerData).forEach(([key, value]) => {
      |                                                    ^
  587 |         if (key >= range[0] && key <= range[1]) {
  588 |           Object.entries(heatLayerData[key].values).forEach(
  589 |             ([subKey, subValue]) => {


warning: 'subValue' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:589:23:
  587 |         if (key >= range[0] && key <= range[1]) {
  588 |           Object.entries(heatLayerData[key].values).forEach(
> 589 |             ([subKey, subValue]) => {
      |                       ^
  590 |               heatLayerData[key].values[subKey].forEach((v, i, a) => {
  591 |                 if (!heatLayerData[key].busyAgents.includes(v)) {
  592 |                   heatLayerData[key].values[subKey].splice(i, 1);


warning: 'a' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:590:64:
  588 |           Object.entries(heatLayerData[key].values).forEach(
  589 |             ([subKey, subValue]) => {
> 590 |               heatLayerData[key].values[subKey].forEach((v, i, a) => {
      |                                                                ^
  591 |                 if (!heatLayerData[key].busyAgents.includes(v)) {
  592 |                   heatLayerData[key].values[subKey].splice(i, 1);
  593 |                 }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:619:3:
  617 |     }
  618 |   },
> 619 |   addArcLayer({ state, commit, dispatch, rootState }, arcLayerData) {
      |   ^
  620 |     buildArcLayer(arcLayerData).then((deckLayer) => {
  621 |       if (rootState.map?.getLayer(abmArcLayerName)) {
  622 |         rootState.map?.removeLayer(abmArcLayerName);


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:619:15:
  617 |     }
  618 |   },
> 619 |   addArcLayer({ state, commit, dispatch, rootState }, arcLayerData) {
      |               ^
  620 |     buildArcLayer(arcLayerData).then((deckLayer) => {
  621 |       if (rootState.map?.getLayer(abmArcLayerName)) {
  622 |         rootState.map?.removeLayer(abmArcLayerName);


warning: 'state' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:619:17:
  617 |     }
  618 |   },
> 619 |   addArcLayer({ state, commit, dispatch, rootState }, arcLayerData) {
      |                 ^
  620 |     buildArcLayer(arcLayerData).then((deckLayer) => {
  621 |       if (rootState.map?.getLayer(abmArcLayerName)) {
  622 |         rootState.map?.removeLayer(abmArcLayerName);


warning: Argument 'arcLayerData' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:619:55:
  617 |     }
  618 |   },
> 619 |   addArcLayer({ state, commit, dispatch, rootState }, arcLayerData) {
      |                                                       ^
  620 |     buildArcLayer(arcLayerData).then((deckLayer) => {
  621 |       if (rootState.map?.getLayer(abmArcLayerName)) {
  622 |         rootState.map?.removeLayer(abmArcLayerName);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:632:3:
  630 |     });
  631 |   },
> 632 |   addSWLayer({ state, commit, dispatch, rootState }) {
      |   ^
  633 |     buildSWLayer(state.swResultGeoJson, state.rainTime).then((deckLayer) => {
  634 |       if (rootState.map?.getLayer(swLayerName)) {
  635 |         rootState.map?.removeLayer(swLayerName);


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:632:14:
  630 |     });
  631 |   },
> 632 |   addSWLayer({ state, commit, dispatch, rootState }) {
      |              ^
  633 |     buildSWLayer(state.swResultGeoJson, state.rainTime).then((deckLayer) => {
  634 |       if (rootState.map?.getLayer(swLayerName)) {
  635 |         rootState.map?.removeLayer(swLayerName);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:653:3:
  651 |     });
  652 |   },
> 653 |   filterAbmCore({ state, commit, dispatch, rootState }, filterSettings) {
      |   ^
  654 |     const abmData = state.activeAbmSet;
  655 |     const timePaths = state.abmTimePaths;
  656 |     const filterSet = { ...state.clusteredAbmData };


warning: Object pattern argument should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:653:17:
  651 |     });
  652 |   },
> 653 |   filterAbmCore({ state, commit, dispatch, rootState }, filterSettings) {
      |                 ^
  654 |     const abmData = state.activeAbmSet;
  655 |     const timePaths = state.abmTimePaths;
  656 |     const filterSet = { ...state.clusteredAbmData };


warning: 'rootState' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:653:44:
  651 |     });
  652 |   },
> 653 |   filterAbmCore({ state, commit, dispatch, rootState }, filterSettings) {
      |                                            ^
  654 |     const abmData = state.activeAbmSet;
  655 |     const timePaths = state.abmTimePaths;
  656 |     const filterSet = { ...state.clusteredAbmData };


warning: Argument 'filterSettings' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/actions.ts:653:57:
  651 |     });
  652 |   },
> 653 |   filterAbmCore({ state, commit, dispatch, rootState }, filterSettings) {
      |                                                         ^
  654 |     const abmData = state.activeAbmSet;
  655 |     const timePaths = state.abmTimePaths;
  656 |     const filterSet = { ...state.clusteredAbmData };


warning: 'isNoiseScenarioMatching' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/actions.ts:704:10:
  702 | }
  703 | 
> 704 | function isNoiseScenarioMatching(noiseDataSet, noiseScenario) {
      |          ^
  705 |   return (
  706 |     noiseDataSet["noise_scenario"]["traffic_quota"] ==
  707 |       noiseScenario.traffic_quota &&


warning: 'calculateAbmStatsForFocusArea' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/amenityStats.ts:4:10:
  2 | import * as turf from "@turf/turf";
  3 | import GrasbrookGeoJson from "@/assets/grasbrookArea.json";
> 4 | import { calculateAbmStatsForFocusArea } from "@/store/scenario/abmStats";
    |          ^
  5 | 
  6 | /** calculates stats for all focus areas individually **/
  7 | export async function calculateAmenityStatsForMultiLayerAnalysis() {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/amenityStats.ts:7:8:
   5 | 
   6 | /** calculates stats for all focus areas individually **/
>  7 | export async function calculateAmenityStatsForMultiLayerAnalysis() {
     |        ^
   8 |   const amenityStats = {};
   9 | 
  10 |   const focusAreaIds = store.state.focusAreasGeoJson["features"].map((feat) => {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/amenityStats.ts:59:8:
  57 | 
  58 | /** calculates stats for 1 focus area or entire grasbrook as a single big area **/
> 59 | export async function calculateAmenityStatsForFocusArea(focusAreaId?: number) {
     |        ^
  60 |   if (!store.state.scenario.amenitiesGeoJson) {
  61 |     console.log("cannot calc amenity stats - no amenityGeoJson in store!");
  62 |     return;


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/amenityStats.ts:188:8:
  186 |  * calculate density of non-residential amenities all over grasbrook and each focus area
  187 |  */
> 188 | export function calculateDensityOfAmenities(amenitiesWithin, forRegion) {
      |        ^
  189 |   const amenityCount = amenitiesWithin.features.length;
  190 | 
  191 |   console.log("amenities count", amenityCount);


warning: Argument 'amenitiesWithin' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/amenityStats.ts:188:45:
  186 |  * calculate density of non-residential amenities all over grasbrook and each focus area
  187 |  */
> 188 | export function calculateDensityOfAmenities(amenitiesWithin, forRegion) {
      |                                             ^
  189 |   const amenityCount = amenitiesWithin.features.length;
  190 | 
  191 |   console.log("amenities count", amenityCount);


warning: Argument 'forRegion' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/amenityStats.ts:188:62:
  186 |  * calculate density of non-residential amenities all over grasbrook and each focus area
  187 |  */
> 188 | export function calculateDensityOfAmenities(amenitiesWithin, forRegion) {
      |                                                              ^
  189 |   const amenityCount = amenitiesWithin.features.length;
  190 | 
  191 |   console.log("amenities count", amenityCount);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/amenityStats.ts:203:8:
  201 |  * https://de.wikipedia.org/wiki/Simpson-Index
  202 |  */
> 203 | export function calculateAmenityDiversity(grasbrookAmenities, amenitiesWithin) {
      |        ^
  204 |   if (amenitiesWithin.features.length === 0) {
  205 |     // no amenities , no diversity
  206 |     return 0;


warning: Argument 'grasbrookAmenities' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/amenityStats.ts:203:43:
  201 |  * https://de.wikipedia.org/wiki/Simpson-Index
  202 |  */
> 203 | export function calculateAmenityDiversity(grasbrookAmenities, amenitiesWithin) {
      |                                           ^
  204 |   if (amenitiesWithin.features.length === 0) {
  205 |     // no amenities , no diversity
  206 |     return 0;


warning: Argument 'amenitiesWithin' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/amenityStats.ts:203:63:
  201 |  * https://de.wikipedia.org/wiki/Simpson-Index
  202 |  */
> 203 | export function calculateAmenityDiversity(grasbrookAmenities, amenitiesWithin) {
      |                                                               ^
  204 |   if (amenitiesWithin.features.length === 0) {
  205 |     // no amenities , no diversity
  206 |     return 0;


warning: 'featureIndex' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/amenityStats.ts:245:57:
  243 |   const amenityTypes = [];
  244 |   // TODO: this is using the entire grasbrook to calculate amenityTypesTotalCount - or should that be compared to the region??
> 245 |   turf.propEach(amenities, function (currentProperties, featureIndex) {
      |                                                         ^
  246 |     if (!amenityTypes.includes(currentProperties["GFK"])) {
  247 |       amenityTypes.push(currentProperties["GFK"]);
  248 |     }


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/calculationModules.ts:2:8:
  1 | // returns the result uuids of the result
> 2 | export async function request_calculation(simType, scenario) {
    |        ^
  3 |   let url = "";
  4 |   scenario["result_format"] = "geojson"; // mapbox front-end always needs geojson results
  5 | 


warning: Argument 'simType' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/calculationModules.ts:2:43:
  1 | // returns the result uuids of the result
> 2 | export async function request_calculation(simType, scenario) {
    |                                           ^
  3 |   let url = "";
  4 |   scenario["result_format"] = "geojson"; // mapbox front-end always needs geojson results
  5 | 


warning: Argument 'scenario' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/calculationModules.ts:2:52:
  1 | // returns the result uuids of the result
> 2 | export async function request_calculation(simType, scenario) {
    |                                                    ^
  3 |   let url = "";
  4 |   scenario["result_format"] = "geojson"; // mapbox front-end always needs geojson results
  5 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/calculationModules.ts:41:8:
  39 |  * @param scenarioHash
  40 |  */
> 41 | export async function getSimulationResultForScenario(simType, task_uuid) {
     |        ^
  42 |   let url = "";
  43 |   switch (simType) {
  44 |     case "wind":


warning: Argument 'simType' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/calculationModules.ts:41:54:
  39 |  * @param scenarioHash
  40 |  */
> 41 | export async function getSimulationResultForScenario(simType, task_uuid) {
     |                                                      ^
  42 |   let url = "";
  43 |   switch (simType) {
  44 |     case "wind":


warning: Argument 'task_uuid' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/calculationModules.ts:41:63:
  39 |  * @param scenarioHash
  40 |  */
> 41 | export async function getSimulationResultForScenario(simType, task_uuid) {
     |                                                               ^
  42 |   let url = "";
  43 |   switch (simType) {
  44 |     case "wind":


warning: 'buildTripsLayer' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/getters.ts:3:3:
  1 | import {
  2 |   abmTripsLayerName,
> 3 |   buildTripsLayer,
    |   ^
  4 |   animate,
  5 | } from "@/store/deck-layers";
  6 | 


warning: 'animate' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/getters.ts:4:3:
  2 |   abmTripsLayerName,
  3 |   buildTripsLayer,
> 4 |   animate,
    |   ^
  5 | } from "@/store/deck-layers";
  6 | 
  7 | export default {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/getters.ts:8:3:
   6 | 
   7 | export default {
>  8 |   getAbmData(state, getters, rootState) {
     |   ^
   9 |     const deckLayer = rootState.map?.getLayer(abmTripsLayerName);
  10 |     return deckLayer?.implementation?.props?.data;
  11 |   },


warning: Argument 'state' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/getters.ts:8:14:
   6 | 
   7 | export default {
>  8 |   getAbmData(state, getters, rootState) {
     |              ^
   9 |     const deckLayer = rootState.map?.getLayer(abmTripsLayerName);
  10 |     return deckLayer?.implementation?.props?.data;
  11 |   },


warning: Argument 'getters' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/getters.ts:8:21:
   6 | 
   7 | export default {
>  8 |   getAbmData(state, getters, rootState) {
     |                     ^
   9 |     const deckLayer = rootState.map?.getLayer(abmTripsLayerName);
  10 |     return deckLayer?.implementation?.props?.data;
  11 |   },


warning: Argument 'rootState' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/getters.ts:8:30:
   6 | 
   7 | export default {
>  8 |   getAbmData(state, getters, rootState) {
     |                              ^
   9 |     const deckLayer = rootState.map?.getLayer(abmTripsLayerName);
  10 |     return deckLayer?.implementation?.props?.data;
  11 |   },


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/scenario/index.ts:7:24:
   5 | import getters from "./getters";
   6 | 
>  7 | const scenario: Module<any, any> = {
     |                        ^
   8 |   namespaced: true,
   9 |   state,
  10 |   getters,


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/scenario/index.ts:7:29:
   5 | import getters from "./getters";
   6 | 
>  7 | const scenario: Module<any, any> = {
     |                             ^
   8 |   namespaced: true,
   9 |   state,
  10 |   getters,


warning: 'cityPyO' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/multiLayerAnalysis.ts:3:8:
  1 | import * as turf from "@turf/turf";
  2 | import store from "@/store";
> 3 | import cityPyO from "@/store/cityPyO";
    |        ^
  4 | 
  5 | /**
  6 |  * Filters the original dataset according to request


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/multiLayerAnalysis.ts:11:8:
   9 |  * @param request
  10 |  */
> 11 | export function filterAndScaleLayerData(request: LayerAnalysisRequest) {
     |        ^
  12 |   console.warn(" filter and scale data layerName, Range", request);
  13 | 
  14 |   const layerData = createLayerData(request.layerName);


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/multiLayerAnalysis.ts:40:8:
  38 |  * @param layer_2
  39 |  */
> 40 | export function showMultiLayerAnalysis(layer_1, layer_2, logicOperator) {
     |        ^
  41 |   return store.state.cityPyO
  42 |     .combineLayers(layer_1, layer_2)
  43 |     .then((combinedGeoJson) => {


warning: Argument 'layer_1' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/multiLayerAnalysis.ts:40:40:
  38 |  * @param layer_2
  39 |  */
> 40 | export function showMultiLayerAnalysis(layer_1, layer_2, logicOperator) {
     |                                        ^
  41 |   return store.state.cityPyO
  42 |     .combineLayers(layer_1, layer_2)
  43 |     .then((combinedGeoJson) => {


warning: Argument 'layer_2' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/multiLayerAnalysis.ts:40:49:
  38 |  * @param layer_2
  39 |  */
> 40 | export function showMultiLayerAnalysis(layer_1, layer_2, logicOperator) {
     |                                                 ^
  41 |   return store.state.cityPyO
  42 |     .combineLayers(layer_1, layer_2)
  43 |     .then((combinedGeoJson) => {


warning: Argument 'logicOperator' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/multiLayerAnalysis.ts:40:58:
  38 |  * @param layer_2
  39 |  */
> 40 | export function showMultiLayerAnalysis(layer_1, layer_2, logicOperator) {
     |                                                          ^
  41 |   return store.state.cityPyO
  42 |     .combineLayers(layer_1, layer_2)
  43 |     .then((combinedGeoJson) => {


warning: 'logicOperator' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/multiLayerAnalysis.ts:40:58:
  38 |  * @param layer_2
  39 |  */
> 40 | export function showMultiLayerAnalysis(layer_1, layer_2, logicOperator) {
     |                                                          ^
  41 |   return store.state.cityPyO
  42 |     .combineLayers(layer_1, layer_2)
  43 |     .then((combinedGeoJson) => {


error: 'feature.properties["value"]' is assigned to itself (no-self-assign) at src/store/scenario/multiLayerAnalysis.ts:81:39:
  79 |       } else {
  80 |         // wind and sun result value has key "value"
> 81 |         feature.properties["value"] = feature.properties["value"];
     |                                       ^
  82 |       }
  83 |       feature.properties["layerName"] = layerName;
  84 |       feature.properties["id"] = featureId;


warning: 'invertLayerFilter' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/multiLayerAnalysis.ts:165:10:
  163 |  * @param layerToInvert
  164 |  */
> 165 | function invertLayerFilter(layerToInvert) {
      |          ^
  166 |   const layerName = layerToInvert.features[0].properties.layerName;
  167 |   const unfilteredData = createLayerData(layerName);
  168 |   const invertedData = [];


warning: 'flattenFeatureCollection' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/multiLayerAnalysis.ts:219:10:
  217 |  * @param featureCollection
  218 |  */
> 219 | function flattenFeatureCollection(featureCollection) {
      |          ^
  220 |   const flattenedFeatures = [];
  221 |   featureCollection.features.forEach((feature) => {
  222 |     if (feature.geometry.type == "MultiPolygon") {


warning: 'generateSimpleMutations' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/scenario/mutations.ts:4:3:
  2 | import {
  3 |   generateMutations,
> 4 |   generateSimpleMutations,
    |   ^
  5 | } from "@/store/utils/generators";
  6 | 
  7 | export default {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/mutations.ts:9:3:
   7 | export default {
   8 |   ...generateMutations(state),
>  9 |   resultLoading(state: GenericObject, isLoading: boolean) {
     |   ^
  10 |     console.log("resetting is loading", isLoading);
  11 |     state.resultLoading = isLoading;
  12 |   },


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/mutations.ts:13:3:
  11 |     state.resultLoading = isLoading;
  12 |   },
> 13 |   updateStreetOrientation(state: GenericObject, payload: string) {
     |   ^
  14 |     state.moduleSettings.main_street_orientation = payload;
  15 |   },
  16 |   moduleSettingsUpdate(state: GenericObject, payload: { [key: string]: any }) {


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/mutations.ts:16:3:
  14 |     state.moduleSettings.main_street_orientation = payload;
  15 |   },
> 16 |   moduleSettingsUpdate(state: GenericObject, payload: { [key: string]: any }) {
     |   ^
  17 |     state.moduleSettings = {
  18 |       ...state.moduleSettings,
  19 |       ...payload,


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/scenario/mutations.ts:16:72:
  14 |     state.moduleSettings.main_street_orientation = payload;
  15 |   },
> 16 |   moduleSettingsUpdate(state: GenericObject, payload: { [key: string]: any }) {
     |                                                                        ^
  17 |     state.moduleSettings = {
  18 |       ...state.moduleSettings,
  19 |       ...payload,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/mutations.ts:22:3:
  20 |     };
  21 |   },
> 22 |   scenarioViewFilterUpdate(
     |   ^
  23 |     state: GenericObject,
  24 |     payload: { [key: string]: any }
  25 |   ) {


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/scenario/mutations.ts:24:31:
  22 |   scenarioViewFilterUpdate(
  23 |     state: GenericObject,
> 24 |     payload: { [key: string]: any }
     |                               ^
  25 |   ) {
  26 |     state.scenarioViewFilters = {
  27 |       ...state.scenarioViewFilters,


warning: Argument 'objectData' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/odArcs.ts:5:3:
  3 | 
  4 | export async function getOdArcData(
> 5 |   objectData,
    |   ^
  6 |   modalInfo,
  7 |   asOrigin: boolean
  8 | ): Promise<any[]> {


warning: Argument 'modalInfo' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/odArcs.ts:6:3:
  4 | export async function getOdArcData(
  5 |   objectData,
> 6 |   modalInfo,
    |   ^
  7 |   asOrigin: boolean
  8 | ): Promise<any[]> {
  9 |   const amenityPoints = getAmenityPoints(objectData, modalInfo);


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/scenario/odArcs.ts:8:12:
   6 |   modalInfo,
   7 |   asOrigin: boolean
>  8 | ): Promise<any[]> {
     |            ^
   9 |   const amenityPoints = getAmenityPoints(objectData, modalInfo);
  10 |   const odPointCollection = getOdPointCollection(asOrigin);
  11 |   const arcLayerData = [];


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/scenario/odArcs.ts:18:41:
  16 |     const filteredOdPoints = [];
  17 |     turf.featureEach(odPointCollection, function (odPoint) {
> 18 |       if (turf.distance(amenityPoint as any, odPoint) < 0.01) {
     |                                         ^
  19 |         filteredOdPoints.push(odPoint);
  20 |       }
  21 |     });


warning: Argument 'objectData' should be typed (@typescript-eslint/explicit-module-boundary-types) at src/store/scenario/odArcs.ts:63:3:
  61 | /** finds amenities located within a buffer of a building outline */
  62 | export function findAdjacentAmenities(
> 63 |   objectData
     |   ^
  64 | ): turf.FeatureCollection<turf.Point> {
  65 |   const groundFloorData = objectData.filter((buildingInLayer) => {
  66 |     return buildingInLayer.layer.id === "groundfloor";


warning: 'bridges' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/state.ts:3:10:
  1 | import Defaults from "@/defaults";
  2 | import Config from "@/config/config.json";
> 3 | import { bridges, mainStreetOrientationOptions } from "@/store/abm.ts";
    |          ^
  4 | 
  5 | const initialState: StoreState = {
  6 |   map: null,


warning: 'mainStreetOrientationOptions' is defined but never used (@typescript-eslint/no-unused-vars) at src/store/state.ts:3:19:
  1 | import Defaults from "@/defaults";
  2 | import Config from "@/config/config.json";
> 3 | import { bridges, mainStreetOrientationOptions } from "@/store/abm.ts";
    |                   ^
  4 | 
  5 | const initialState: StoreState = {
  6 |   map: null,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/utils/composeModules.ts:26:16:
  24 |  * @returns {GenericObject} composed module
  25 |  */
> 26 | export default function (modules: Record<string, unknown>[]) {
     |                ^
  27 |   return {
  28 |     namespaced: true,
  29 |     state: composeField("state", modules),


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/utils/generators.ts:10:8:
   8 |  * @returns {object.<string, function>} object of mutations
   9 |  */
> 10 | export function generateSimpleMutations(state: GenericObject) {
     |        ^
  11 |   return Object.keys(state).reduce((acc, key) => {
  12 |     return {
  13 |       ...acc,


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/utils/generators.ts:14:52:
  12 |     return {
  13 |       ...acc,
> 14 |       [key]: (moduleState: GenericObject, payload: any) => {
     |                                                    ^
  15 |         moduleState[key] = payload;
  16 |       },
  17 |     };


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/utils/generators.ts:22:48:
  20 | 
  21 | function generateSimpleMutation(key) {
> 22 |   return (moduleState: GenericObject, payload: any) => {
     |                                                ^
  23 |     moduleState[key] = payload;
  24 |   };
  25 | }


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/store/utils/generators.ts:28:48:
  26 | 
  27 | function generateComplexMutation(key) {
> 28 |   return (moduleState: GenericObject, payload: any) => {
     |                                                ^
  29 |     const p = key.split("/");
  30 |     let r = moduleState;
  31 | 


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/utils/generators.ts:42:8:
  40 | }
  41 | 
> 42 | export function generateMutations(state: GenericObject, prefix?: string) {
     |        ^
  43 |   const mutations = Object.keys(state).reduce((acc, key) => {
  44 |     const _key = prefix ? prefix + "/" + key : key;
  45 |     const mutation = prefix


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/utils/generators.ts:77:8:
  75 |  * @returns {object.<string, function>} object of getters
  76 |  */
> 77 | export function generateSimpleGetters(state: GenericObject) {
     |        ^
  78 |   return Object.keys(state).reduce(
  79 |     (acc, key) => ({
  80 |       ...acc,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/utils/generators.ts:87:8:
  85 | }
  86 | 
> 87 | export function generateStoreGetterSetter(properties: string[][]) {
     |        ^
  88 |   return properties.reduce((acc, keys) => {
  89 |     return {
  90 |       ...acc,


warning: Missing return type on function (@typescript-eslint/explicit-module-boundary-types) at src/store/utils/generators.ts:104:8:
  102 | }
  103 | 
> 104 | export function resolveStorePath(path: string, ctx: Vue) {
      |        ^
  105 |   const pathArr = path.split("/");
  106 | 
  107 |   let stateVal = ctx.$store?.state;


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/typings.d.ts:10:20:
   8 | declare global {
   9 |   interface GenericObject {
> 10 |     [key: string]: any;
     |                    ^
  11 |   }
  12 |   interface StoreModule {
  13 |     state: GenericObject;


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/typings.d.ts:20:15:
  18 | 
  19 |   interface Feature {
> 20 |     rendered: any;
     |               ^
  21 |     source: any;
  22 |     sourceId: string;
  23 |   }


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/typings.d.ts:21:13:
  19 |   interface Feature {
  20 |     rendered: any;
> 21 |     source: any;
     |             ^
  22 |     sourceId: string;
  23 |   }
  24 | 


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/typings.d.ts:27:36:
  25 |   interface ScenarioResult {
  26 |     designScenario: string;
> 27 |     moduleSettings: Record<string, any>;
     |                                    ^
  28 |     scenarioViewFilters: Record<string, any>;
  29 |   }
  30 | 


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/typings.d.ts:28:41:
  26 |     designScenario: string;
  27 |     moduleSettings: Record<string, any>;
> 28 |     scenarioViewFilters: Record<string, any>;
     |                                         ^
  29 |   }
  30 | 
  31 |   interface AbmScenario extends ScenarioResult {


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/typings.d.ts:93:28:
  91 |     modalIndex: number;
  92 |     selectedObjectId: string | null;
> 93 |     selectedMultiFeatures: any[];
     |                            ^
  94 |     featureCircles: any[];
  95 |     visibleLayers: GenericObject;
  96 |   }


warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-any) at src/typings.d.ts:94:21:
  92 |     selectedObjectId: string | null;
  93 |     selectedMultiFeatures: any[];
> 94 |     featureCircles: any[];
     |                     ^
  95 |     visibleLayers: GenericObject;
  96 |   }
  97 | 


33 errors and 601 warnings found.
